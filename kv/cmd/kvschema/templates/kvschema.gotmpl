{{/* 
Copyright 2019 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/}}

{{define "kvschema.go"}}// Code generated by "kvschema"; DO NOT EDIT.

package {{.Package.Name}}

import (
	"github.com/google/note-maps/kv"
)

// Store provides entities, components, and indexes backed by a key-value
// store.
//
// Usage:
//{{with index .ComponentTypes 0}}
//   {{.SVar}}, err := Store{Store: store}.{{.Name}}Component(0).Scan([]kv.Entity{7, 42})
//{{end}}
type Store struct {
	kv.Store
	parent kv.Entity
}

// Parent returns the Entity that is used as a parent for all operations.
func (s Store) Parent() kv.Entity {
	return s.parent
}

// WithParent returns a new Store with e as the parent for all operations.
func (s Store) WithParent(e kv.Entity) *Store {
	s.parent = e
	return &s
}
{{range .ComponentTypes}}{{template "component" .}}{{end}}{{end}}

{{define "component"}}
// Set{{.Name}} sets the {{.Name}} associated with e to v.
//
// Corresponding indexes are updated.
func (s *Store) Set{{.Name}}(e kv.Entity, v {{if .DirectEncoder}}{{else}}*{{end}}{{.Name}}) error {
	key := make(kv.Prefix, 8+2+8)
	s.parent.EncodeAt(key)
	{{.PrefixName}}.EncodeAt(key[8:])
	e.EncodeAt(key[10:])
	{{ if .Indexes }}var old {{.Name}}
	if err := s.Get(key, old.Decode); err != nil {
		return err
	}
	if err := s.Set(key, v.Encode()); err != nil {
		return err
	}
	lek := len(key)
	kv.Entity(0).EncodeAt(key[10:])
	key = append(key, kv.Component(0).Encode()...)
	var (
		lik = len(key)
		es  kv.EntitySlice
	){{ range .Indexes }}

	// Update {{.Name}} index
	key = key[:lek].AppendComponent({{.PrefixName}})
	for _, iv := range old.{{.MethodName}}() {
		key = append(key[:lik], iv.Encode()...)
		if err := s.Get(key, es.Decode); err != nil {
			return err
		}
		if es.Remove(e) {
			if err := s.Set(key, es.Encode()); err != nil {
				return err
			}
		}
	}
	for _, iv := range v.{{.MethodName}}() {
		key = append(key[:lik], iv.Encode()...)
		if err := s.Get(key, es.Decode); err != nil {
			return err
		}
		if es.Insert(e) {
			if err := s.Set(key, es.Encode()); err != nil {
				return err
			}
		}
	}
	return nil{{ end }}{{ else }}return s.Set(key, v.Encode()){{ end }}
}

// Get{{.Name}}Slice returns a {{.Name}} for each entity in es.
//
// If the underlying storage returns an empty value with no error for keys that
// do not exist, and {{.Name}}.Decode() can decode an empty byte slice, then a
// query for entities that are not associated with a {{.Name}} should return no
// errors.
func (s *Store) Get{{.Name}}Slice(es []kv.Entity) ([]{{.Name}}, error) {
	result := make([]{{.Name}}, len(es))
	key := make(kv.Prefix, 8+2+8)
	s.parent.EncodeAt(key)
	{{.PrefixName}}.EncodeAt(key[8:])
	for i, e := range es {
		e.EncodeAt(key[10:])
		err := s.Get(key, (&result[i]).Decode)
		if err != nil {
			return nil, err
		}
	}
	return result, nil
}{{range .Indexes}}

// EntitiesMatching{{.ComponentName}}{{.Name}} returns entities with {{.ComponentName}} values that return a matching {{.TypeExpr}} from their {{.MethodName}} method.
//
// The returned EntitySlice is already sorted.
func (s *Store) EntitiesMatching{{.ComponentName}}{{.Name}}(v {{.TypeExpr}}) (kv.EntitySlice, error) {
	key := make(kv.Prefix, 8+2+8+2)
	s.parent.EncodeAt(key)
	{{.ComponentPrefixName}}.EncodeAt(key[8:])
	kv.Entity(0).EncodeAt(key[10:])
	{{.PrefixName}}.EncodeAt(key[18:])
	key = append(key, v.Encode()...)
	var es kv.EntitySlice
	return es, s.Get(key, es.Decode)
}

// EntitiesBy{{.ComponentName}}{{.Name}} returns entities with
// {{.ComponentName}} values ordered by the {{.TypeExpr}} values from their
// {{.MethodName}} method.
//
// Reading begins at cursor, and ends when the length of the returned Entity
// slice is less than n. When reading is not complete, cursor is updated such
// that using it in a subequent call to By{{.Name}} would return next n
// entities.
func (s *Store) EntitiesBy{{.ComponentName}}{{.Name}}(cursor *kv.IndexCursor, n int) (es []kv.Entity, err error) {
	key := make(kv.Prefix, 8+2+8+2)
	s.parent.EncodeAt(key)
	{{.ComponentPrefixName}}.EncodeAt(key[8:])
	kv.Entity(0).EncodeAt(key[10:])
	{{.PrefixName}}.EncodeAt(key[18:])
	iter := s.PrefixIterator(key)
	defer iter.Discard()
	iter.Seek(cursor.Key)
	if !iter.Valid() {
		return
	}
	var buf kv.EntitySlice
	if err = iter.Value(buf.Decode); err != nil {
		return
	}
	if cursor.Offset < len(buf) {
		es = append(es, buf[cursor.Offset:]...)
		if len(es) >= n {
			cursor.Offset += n
			if len(es) > n {
				es = es[:n]
			}
			return
		}
	}
	for iter.Next(); iter.Valid(); iter.Next() {
		if err = iter.Value(buf.Decode); err != nil {
			return
		}
		es = append(es, buf...)
		if len(es) >= n {
			cursor.Key = append(cursor.Key[0:0], iter.Key()...)
			cursor.Offset = len(buf) - (len(es) - n)
			if len(es) > n {
				es = es[:n]
			}
			return
		}
	}
	return
}{{end}}
{{end}}

{{/* 
Copyright 2019 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/}}

{{define "kvschema.go"}}// Code generated by "kvschema"; DO NOT EDIT.

package {{.Package.Name}}

import (
	"github.com/google/note-maps/kv"
)

// Txn provides entities, components, and indexes backed by a key-value store.
type Txn struct{ kv.Partitioned }

func New(t kv.Txn) Txn { return Txn{kv.Partitioned{t, 0}} }
{{range .ComponentTypes}}{{template "component" .}}{{end}}{{end}}

{{define "component"}}
// Set{{.Name}} sets the {{.Name}} associated with e to v.
//
// Corresponding indexes are updated.
func (s Txn) Set{{.Name}}(e kv.Entity, v {{if .DirectEncoder}}{{else}}*{{end}}{{.Name}}) error {
	key := make(kv.Prefix, 8+2+8)
	s.Partition.EncodeAt(key)
	{{.PrefixName}}.EncodeAt(key[8:])
	e.EncodeAt(key[10:])
	{{ if .Indexes }}var old {{.Name}}
	if err := s.Get(key, old.Decode); err != nil {
		return err
	}
	if err := s.Set(key, v.Encode()); err != nil {
		return err
	}
	lek := len(key)
	kv.Entity(0).EncodeAt(key[10:])
	key = append(key, kv.Component(0).Encode()...)
	var (
		lik = len(key)
		es  kv.EntitySlice
	){{ range .Indexes }}

	// Update {{.Name}} index
	key = key[:lek].AppendComponent({{.PrefixName}})
	for _, iv := range old.{{.MethodName}}() {
		key = append(key[:lik], iv.Encode()...)
		if err := s.Get(key, es.Decode); err != nil {
			return err
		}
		if es.Remove(e) {
			if err := s.Set(key, es.Encode()); err != nil {
				return err
			}
		}
	}
	for _, iv := range v.{{.MethodName}}() {
		key = append(key[:lik], iv.Encode()...)
		if err := s.Get(key, es.Decode); err != nil {
			return err
		}
		if es.Insert(e) {
			if err := s.Set(key, es.Encode()); err != nil {
				return err
			}
		}
	}
	return nil{{ end }}{{ else }}return s.Set(key, v.Encode()){{ end }}
}

// Get{{.Name}} returns the {{.Name}} associated with e.
//
// If no {{.Name}} has been explicitly set for e, and Get{{.Name}} will return
// the result of decoding a {{.Name}} from an empty slice of bytes.
func (s Txn) Get{{.Name}}(e kv.Entity) ({{.Name}}, error) {
	var v {{.Name}}
	vs, err := s.Get{{.Name}}Slice([]kv.Entity{e})
	if len(vs) >= 1 {
		v = vs[0]
	}
	return v, err
}

// Get{{.Name}}Slice returns a {{.Name}} for each entity in es.
//
// If no {{.Name}} has been explicitly set for an entity, and the result will
// be a {{.Name}} that has been decoded from an empty slice of bytes.
func (s Txn) Get{{.Name}}Slice(es []kv.Entity) ([]{{.Name}}, error) {
	result := make([]{{.Name}}, len(es))
	key := make(kv.Prefix, 8+2+8)
	s.Partition.EncodeAt(key)
	{{.PrefixName}}.EncodeAt(key[8:])
	for i, e := range es {
		e.EncodeAt(key[10:])
		err := s.Get(key, (&result[i]).Decode)
		if err != nil {
			return nil, err
		}
	}
	return result, nil
}

// All{{.Name}}Entities returns the first n entities that have a {{.Name}}, beginning
// with the first entity greater than or equal to *start.
//
// A nil start value will be interpreted as a pointer to zero.
//
// A value of n less than or equal to zero will be interpretted as the largest
// possible value.
func (s Txn) All{{.Name}}Entities(start *kv.Entity, n int) (es []kv.Entity, err error) {
	return s.AllComponentEntities({{.PrefixName}}, start, n)
}{{range .Indexes}}

// EntitiesMatching{{.ComponentName}}{{.Name}} returns entities with {{.ComponentName}} values that return a matching {{.TypeExpr}} from their {{.MethodName}} method.
//
// The returned EntitySlice is already sorted.
func (s Txn) EntitiesMatching{{.ComponentName}}{{.Name}}(v {{.TypeExpr}}) (kv.EntitySlice, error) {
	key := make(kv.Prefix, 8+2+8+2)
	s.Partition.EncodeAt(key)
	{{.ComponentPrefixName}}.EncodeAt(key[8:])
	kv.Entity(0).EncodeAt(key[10:])
	{{.PrefixName}}.EncodeAt(key[18:])
	key = append(key, v.Encode()...)
	var es kv.EntitySlice
	return es, s.Get(key, es.Decode)
}

// EntitiesBy{{.ComponentName}}{{.Name}} returns entities with
// {{.ComponentName}} values ordered by the {{.TypeExpr}} values from their
// {{.MethodName}} method.
//
// Reading begins at cursor, and ends when the length of the returned Entity
// slice is less than n. When reading is not complete, cursor is updated such
// that using it in a subequent call to By{{.Name}} would return next n
// entities.
func (s Txn) EntitiesBy{{.ComponentName}}{{.Name}}(cursor *kv.IndexCursor, n int) (es []kv.Entity, err error) {
	return s.EntitiesByComponentIndex({{.ComponentPrefixName}}, {{.PrefixName}}, cursor, n)
}{{end}}
{{end}}

// Package bindata Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// templates/kvschema.gotmpl
package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesKvschemaGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xdf\x6f\xdb\xba\x15\x7e\x36\xff\x8a\x33\x3f\x0c\x52\xab\xca\x69\x9f\xba\x16\x19\xe0\x9b\x64\x9d\xb1\xde\xe4\x22\x76\x57\x5c\x04\xc1\x40\x4b\xc7\x36\x61\x9a\x54\x49\x4a\x8e\x27\xe8\x7f\x1f\x0e\x25\x59\xb2\xe3\x24\xcb\x05\x2e\x30\x60\xf7\x29\xb1\xc4\xf3\xf3\xfb\xf8\xf1\x50\x65\x39\x7a\x03\xec\x42\x67\x3b\x23\x96\x2b\x07\x1f\xce\xde\xff\x05\xbe\x68\xbd\x94\x08\x5f\xbf\x5e\x30\xf6\x55\x24\xa8\x2c\xa6\x90\xab\x14\x0d\xb8\x15\xc2\x38\xe3\xc9\x0a\xa1\x79\x13\xc1\x3f\xd1\x58\xa1\x15\x7c\x88\xcf\x20\xa0\x05\xc3\xe6\xd5\x30\xfc\xcc\x76\x3a\x87\x0d\xdf\x81\xd2\x0e\x72\x8b\xe0\x56\xc2\xc2\x42\x48\x04\x7c\x48\x30\x73\x20\x14\x24\x7a\x93\x49\xc1\x55\x82\xb0\x15\x6e\xe5\x83\x34\x2e\x62\xf6\x6b\xe3\x40\xcf\x1d\x17\x0a\x38\x24\x3a\xdb\x81\x5e\xf4\x57\x01\x77\x8c\x01\x00\xac\x9c\xcb\xec\xa7\xd1\x68\xbb\xdd\xc6\xdc\xa7\x19\x6b\xb3\x1c\xc9\x7a\x99\x1d\x7d\x9d\x5c\x5c\x5d\x4f\xaf\xde\x7d\x88\xcf\x18\xfb\xa6\x24\x5a\x0b\x06\x7f\xe4\xc2\x60\x0a\xf3\x1d\xf0\x2c\x93\x22\xe1\x73\x89\x20\xf9\x16\xb4\x01\xbe\x34\x88\x29\x38\x4d\x89\x6e\x8d\x70\x42\x2d\x23\xb0\x7a\xe1\xb6\xdc\x20\x4b\x85\x75\x46\xcc\x73\x77\xd0\xa1\x36\x2d\x61\xa1\xbf\x40\x2b\xe0\x0a\x86\xe3\x29\x4c\xa6\x43\xf8\x69\x3c\x9d\x4c\x23\xf6\x7d\x32\xfb\xfb\xcd\xb7\x19\x7c\x1f\xdf\xde\x8e\xaf\x67\x93\xab\x29\xdc\xdc\xc2\xc5\xcd\xf5\xe5\x64\x36\xb9\xb9\x9e\xc2\xcd\xdf\x60\x7c\xfd\x2b\xfc\x63\x72\x7d\x19\x01\x0a\xb7\x42\x03\xf8\x90\x19\xca\x5d\x1b\x10\xd4\x3b\x4c\x63\x36\x45\x3c\x08\xbe\xd0\x75\x32\x36\xc3\x44\x2c\x44\x02\x92\xab\x65\xce\x97\x08\x4b\x5d\xa0\x51\x42\x2d\x21\x43\xb3\x11\x96\xd0\xb3\xc0\x55\xca\xa4\xd8\x08\xc7\x9d\xff\xfd\xa8\x9c\x98\xbd\x19\x55\x15\x63\x65\x99\xe2\x42\x28\x84\xe1\xba\xb0\xc9\x0a\x37\x3c\x5e\xea\x61\x55\x8d\x46\x70\xa1\x53\x84\x25\x2a\x34\xdc\xd5\x1d\xdd\xaf\x19\x7e\x86\xcb\x1b\xb8\xbe\x99\xc1\xd5\xe5\x64\x16\x33\x96\xf1\x64\x4d\xd9\x94\x65\xfc\x4b\xfd\x6f\x7c\xcd\x37\x48\x11\xc4\x26\xd3\xc6\x41\xc0\x06\xc3\xa5\x70\xab\x7c\x1e\x27\x7a\x33\x5a\x7a\x5a\x8e\x94\x76\xf8\x6e\xc3\x33\x3b\x5a\x17\x43\x16\x32\x36\x1a\xc1\xec\x41\x41\x66\x74\x21\x52\xb4\x80\xca\x09\x27\xd0\x46\x9e\x58\x5a\xa1\x72\x36\xa2\xf2\x40\xa8\x14\x1f\xd0\xc2\x9c\x27\xeb\x06\x70\x58\xe3\xee\x5d\xc1\x65\x8e\x60\x9d\x36\x18\x33\xb7\xcb\xd0\x3b\xb4\xce\xe4\x89\x2b\x61\x5d\xc4\xbf\x70\x43\x3e\xb5\xc2\x14\x2a\xc6\x16\xb9\x4a\xe0\x1a\xb7\x81\xa3\x97\xb3\x07\x15\x7a\x83\x12\x0c\xba\xdc\x28\xfa\x51\x1e\x5a\x95\x2e\x82\xb3\xaa\x82\x8a\x95\xa5\xe1\x6a\x89\x10\x5f\xb4\xc9\xcd\x76\x19\xda\xaa\x2a\x4b\x87\x9b\x4c\x72\x87\x30\xdc\x27\x3e\x84\x98\xde\xa0\x4a\xf7\x7f\xfa\x00\x74\xeb\xaa\x8a\xfa\x30\x45\x57\x96\x4d\x1b\xc1\xa2\xb3\x1e\xbf\xee\x11\xb7\x56\x27\xc2\x63\xe3\x77\x1a\x12\xb1\x8b\x98\x8d\x46\xcc\xa3\x67\x0c\xda\x4c\xab\x94\xb8\xd1\x36\x8b\x1b\x84\x3c\x4b\xc9\x28\xae\x2b\x0f\x2c\xf8\x9a\xfb\xd1\x02\xa4\x56\x5c\x51\xeb\x77\x11\x14\x50\x96\x62\x01\xf1\xa5\x30\x98\xb8\x2b\x95\xe8\x14\x8d\xaf\x40\x5a\xac\xaa\x37\xfb\x8a\x1a\xeb\x10\xd0\x18\x6d\xa0\x64\x83\x35\xee\xe0\xd3\x39\x6c\xf8\x1a\x03\xea\xa1\xc1\x85\x78\x88\xe0\xe3\xdb\x0f\x6f\x3f\x86\x6c\x60\xbb\xae\xc6\xb5\xdf\xb1\x0b\xd6\xb8\x0b\xd9\x80\x88\xe4\x57\xd7\x3e\x0f\x5e\xdf\x7d\xfc\x74\x1f\xb2\x01\x1e\x3e\x7c\x7f\xe6\x9f\x96\x25\x50\xb2\x93\xa6\xe0\xaa\x2a\xb8\x01\x2d\xd3\xae\x71\x6c\x20\x16\x94\x22\x65\x66\xe3\x2f\xe8\xcd\x23\x5a\x13\x5f\x22\x39\x0c\x3f\xfb\xd7\x7f\x3a\x07\x25\x24\x95\x31\x68\xa8\x80\xc6\xb0\xc1\x91\xfd\xb4\xb5\x2f\x9a\x74\x82\xf0\x45\x7b\x89\x6b\x32\x96\xa8\x9a\x6a\xf7\xdd\x0e\xce\xc2\x93\x55\x51\x23\xcf\x49\xd1\x50\xa5\x75\xb8\x75\xd1\x91\xae\xb3\x0a\xc2\x38\x8e\x43\x36\xa0\xa2\x03\x36\x18\x48\xb1\x86\x7e\xa0\x01\x5a\xe8\xb0\x9d\x92\x96\xb2\x41\x58\x96\xd0\xf0\xb8\x6b\x1b\x63\x83\xd1\x08\xbe\x79\xae\xf4\x48\xe7\x89\xd4\xe6\x43\x09\x7e\x92\xb8\xbe\x8f\xc7\x3e\xb3\x2e\xa1\x23\xf8\x42\x36\x20\x05\xfb\x57\x04\xa2\xa0\xca\xeb\x68\xd4\xf1\xb2\x8c\x7f\x46\xb7\xd2\x69\xc3\xbc\xd0\xf7\xeb\xb8\xdc\xbb\x4f\x52\xac\xef\xc9\xfa\xa8\xce\xd3\x50\xa2\x7d\x12\xc9\x03\x28\x08\x0b\xef\xc1\xc6\xb7\xb8\xd1\x05\x06\x58\xc7\x3f\x8d\x30\xda\x67\x20\x3e\xf2\xec\x5d\x57\x1e\xed\x13\x95\x17\xff\x33\x75\x4f\x94\x45\xe3\x7e\x97\xba\x9b\xe7\x4a\xc8\xb2\x04\x54\x29\x90\x46\x00\x89\x06\x54\x55\xf3\xf2\xf4\xfe\xd9\xaf\x67\x95\x3f\x11\x2e\x51\xa2\xc3\x8e\x84\xa9\xff\xfd\xa2\x1e\xfe\x56\x29\x3c\x0a\xd7\x57\xc3\xff\x2f\x6d\xab\x1b\xe1\xb3\xfe\x43\xd2\xfe\x90\xb4\xd7\x6e\xed\x1e\x7d\x8e\x77\xf4\x97\xfe\x6c\x53\x1b\xfc\xd7\xdb\x79\xb2\x00\xa5\x7b\x0b\x57\xdc\xc2\x1c\x51\xd1\x20\x2d\x45\x22\x9c\xdc\xd1\xb8\xe4\x67\x66\xac\x67\xc5\x83\x70\x5b\x21\x65\x13\x93\xdc\x51\x54\x83\x36\x97\x8e\x2e\x22\x29\x35\x99\x64\x82\xf7\x22\x2c\x8c\xde\xd0\xb4\x8f\x9b\xcc\xed\xc0\x12\xc5\x68\xed\x7c\xe7\xd0\x1e\x69\xc7\x97\x27\xc6\xa8\x10\x82\xfd\xf3\xa8\x16\x11\x8f\x0b\xb1\xba\xe8\xef\xdf\xc2\x46\x07\xf0\xef\x5f\x79\x66\x07\x77\xf7\x7b\x97\x25\x12\x09\xc5\xc2\xef\x85\xc2\x86\xf0\xd7\x73\x78\xef\x81\x2b\xe0\x1c\x0a\x7b\x77\x76\xdf\x07\xab\xf0\x7e\x4f\xf4\xdf\x3b\xde\x83\x70\x50\x37\x75\x90\x27\xab\x7a\x0a\xdf\xd1\xad\x89\x0a\x7e\x3d\x0c\xd4\xbb\x66\x9a\x24\x38\x7a\x2d\x27\x30\xc8\xdb\x1c\x0f\x22\xbb\x15\x77\x9d\x47\x0f\x0a\xa6\xbf\x15\x87\xba\x73\x68\xa1\xd7\xbc\x10\x82\xbb\xfb\x93\x88\x34\x89\xb5\xd2\x7e\xb0\x8a\x3a\x8d\x36\x0c\x7f\x67\xf5\xa7\x96\x89\x08\xb0\xd3\x15\xb4\x1e\xd8\xd3\xc7\xc2\xe0\xb1\x5c\x04\x7f\xae\xcb\xb8\x13\xf7\x61\x2b\x1c\x9d\xb4\x9c\x10\x0f\x25\x64\xd4\x29\x48\xc7\x9a\xda\x4d\x44\xef\x1b\xea\x8c\xa5\xdc\x77\xe4\xaa\xb9\x9d\x1d\x6c\xe1\x85\x30\xd6\x81\xda\x5f\xdd\x5a\x30\x8b\x03\x88\x23\x98\xe3\x52\x28\xba\xb9\x92\xd7\xfd\xb7\x82\xda\xba\x21\xdc\xd2\x20\x77\xfe\xe2\xca\x15\xdd\x8f\xf1\x47\xce\x25\x5d\x73\xde\x58\xc7\x8d\x6b\xa9\x38\xf6\xe5\xf8\x47\x50\x5f\xff\xfc\x1e\x9f\x23\x08\xe5\xd0\x64\x06\x49\x45\x38\x91\x3b\xd3\xfe\x11\xf9\xf8\x37\x1a\xdd\x79\xa8\xed\xf4\x02\x14\xf8\x2f\x09\x8f\x42\xd2\xf2\xc7\x7e\x1b\xc7\x94\xb9\xe4\x66\x89\xd6\x91\xbb\x4c\x5b\x2b\xe6\x12\x6b\xaf\x47\xd4\x3c\xd5\xc0\xa0\x4e\xfe\x4d\xef\xda\xa5\x28\x48\x08\x47\xbc\xad\xc5\xa1\xcf\xd6\x46\x6c\xc7\x52\xee\xcf\xaa\xbd\xd7\x23\xae\x45\x75\x8f\x22\x50\x21\xab\xf6\x77\xd7\xe6\x80\xac\x6a\x78\x5b\xdb\x9f\xb9\x4b\x56\x42\x2d\xcb\xb2\x3b\x94\x6b\x2f\x8f\x85\x7b\x8f\xb4\x47\xf1\xb1\x45\xdd\x86\x86\x08\x4d\xc6\x1c\x36\x4d\x04\x32\xa0\x6b\xf3\xd5\x43\x66\x5a\xb1\x75\x2b\x14\x06\x8e\x4e\x52\xd8\xf8\x1f\x2d\x66\xb3\x55\xab\x5a\x98\x42\xef\xf4\x07\x61\x81\x4b\x83\x3c\xdd\x81\xd5\xe6\xf1\x7c\xf7\x8a\x12\x83\xe2\x30\xbb\x10\x82\xc3\x51\xa3\xaf\x1c\xcf\x69\xc2\xdb\x0f\x2f\xaa\xc2\x3e\x87\x97\xe4\xe1\xc5\xd1\xea\x59\x89\x79\xff\xf1\x89\xf1\xeb\x78\x10\xa1\xa3\x09\xed\xa3\xd1\xaa\x9d\x09\x6c\x74\x7a\x3e\x61\x87\x3c\xfa\x69\xf7\x6a\x06\x91\xf9\xd3\x24\xd2\x26\xc5\xe6\x0b\x5f\x33\x30\xf4\xc8\xd3\xac\xe9\x38\xd4\xf8\x7a\x86\x46\xb7\xc8\xfd\x81\xef\xe5\xc8\x02\x77\x90\xe4\xc6\x6a\x53\x1f\x55\xa8\x52\x0b\xdb\x15\xaa\x7a\x8b\xa3\x5a\xba\x55\xfb\xc1\xf2\x88\x7c\xe4\xcc\xb6\x04\xec\x34\x44\xc5\xf0\x9d\xec\x4d\x13\x47\x58\xff\xfd\xd4\x7f\x27\x45\x87\x51\x13\x8e\x9e\x37\xd7\x11\xb0\x79\xb2\xaa\x47\x13\xee\x20\xb7\xde\xca\x7f\x5c\xe5\x60\xf3\x39\xfe\xc8\x51\x39\x48\xb8\xf4\xba\xe4\x1b\xdc\x8e\x36\x3a\x97\x69\xbb\xc3\x14\x3e\x38\xf0\x23\x4e\xdb\xdd\x27\xf6\xc1\xb3\x10\x05\x4d\x7a\x24\x4d\x5e\x29\x2e\x9a\xee\xbc\x52\x9f\xba\x60\xfb\x48\xde\x5d\xf0\x14\xf3\x23\x78\xa4\x5e\x2d\x30\xb5\x7c\xd5\x1f\xd0\xda\xbf\xff\x09\x00\x00\xff\xff\xd5\x0a\x9b\x01\xfd\x16\x00\x00")

func templatesKvschemaGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesKvschemaGotmpl,
		"templates/kvschema.gotmpl",
	)
}

func templatesKvschemaGotmpl() (*asset, error) {
	bytes, err := templatesKvschemaGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/kvschema.gotmpl", size: 5885, mode: os.FileMode(420), modTime: time.Unix(1566230981, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/kvschema.gotmpl": templatesKvschemaGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"kvschema.gotmpl": &bintree{templatesKvschemaGotmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

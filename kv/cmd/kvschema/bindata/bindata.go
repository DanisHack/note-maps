// Package bindata Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// templates/kvschema.gotmpl
package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesKvschemaGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\xdd\x6f\xdb\xc8\x11\x7f\x16\xff\x8a\x39\x3f\x04\xa4\x23\x53\x76\x50\xa0\xa9\x72\x3a\xc0\x67\xbb\xa9\x70\x39\xfb\x10\xf9\x2e\x38\x18\x46\xb1\x22\x47\xd2\x42\xd4\x2e\xb3\xbb\xa4\xad\x32\xfc\xdf\x8b\xd9\x5d\x7e\x48\x96\x9d\x4b\x8b\x03\xda\x27\x5b\xe4\x7c\xcf\x6f\xbe\x58\x55\xa3\x63\x08\x2e\x64\xbe\x55\x7c\xb9\x32\xf0\xe6\xf4\xec\x6f\xf0\x5e\xca\x65\x86\xf0\xe1\xc3\x45\x10\x7c\xe0\x09\x0a\x8d\x29\x14\x22\x45\x05\x66\x85\x70\x9e\xb3\x64\x85\xe0\xdf\x0c\xe1\x37\x54\x9a\x4b\x01\x6f\xe2\x53\x08\x89\xe0\xc8\xbf\x3a\x8a\xde\x05\x5b\x59\xc0\x86\x6d\x41\x48\x03\x85\x46\x30\x2b\xae\x61\xc1\x33\x04\x7c\x4c\x30\x37\xc0\x05\x24\x72\x93\x67\x9c\x89\x04\xe1\x81\x9b\x95\x55\xe2\x45\xc4\xc1\xef\x5e\x80\x9c\x1b\xc6\x05\x30\x48\x64\xbe\x05\xb9\xe8\x53\x01\x33\x41\x00\x00\xb0\x32\x26\xd7\xe3\xd1\xe8\xe1\xe1\x21\x66\xd6\xcc\x58\xaa\xe5\x28\x73\x64\x7a\xf4\x61\x7a\x71\x75\x3d\xbb\x3a\x79\x13\x9f\x06\xc1\xaf\x22\x43\xad\x41\xe1\xe7\x82\x2b\x4c\x61\xbe\x05\x96\xe7\x19\x4f\xd8\x3c\x43\xc8\xd8\x03\x48\x05\x6c\xa9\x10\x53\x30\x92\x0c\x7d\x50\xdc\x70\xb1\x1c\x82\x96\x0b\xf3\xc0\x14\x06\x29\xd7\x46\xf1\x79\x61\x76\x22\xd4\x98\xc5\x35\xf4\x09\xa4\x00\x26\xe0\xe8\x7c\x06\xd3\xd9\x11\xfc\x78\x3e\x9b\xce\x86\xc1\xa7\xe9\xed\x3f\x6e\x7e\xbd\x85\x4f\xe7\x1f\x3f\x9e\x5f\xdf\x4e\xaf\x66\x70\xf3\x11\x2e\x6e\xae\x2f\xa7\xb7\xd3\x9b\xeb\x19\xdc\xfc\x1d\xce\xaf\x7f\x87\x9f\xa6\xd7\x97\x43\x40\x6e\x56\xa8\x00\x1f\x73\x45\xb6\x4b\x05\x9c\x62\x87\x69\x1c\xcc\x10\x77\x94\x2f\xa4\x33\x46\xe7\x98\xf0\x05\x4f\x20\x63\x62\x59\xb0\x25\xc2\x52\x96\xa8\x04\x17\x4b\xc8\x51\x6d\xb8\xa6\xec\x69\x60\x22\x0d\x32\xbe\xe1\x86\x19\xfb\xfb\x89\x3b\x71\x70\x3c\xaa\xeb\x20\xa8\xaa\x14\x17\x5c\x20\x1c\xad\x4b\x9d\xac\x70\xc3\xe2\xa5\x3c\xaa\xeb\xd1\x08\x2e\x64\x8a\xb0\x44\x81\x8a\x19\x17\xd1\x96\xe6\xe8\x1d\x5c\xde\xc0\xf5\xcd\x2d\x5c\x5d\x4e\x6f\xe3\x20\xc8\x59\xb2\x26\x6b\xaa\x2a\xfe\xc5\xfd\x1b\x5f\xb3\x0d\x92\x06\xbe\xc9\xa5\x32\x10\x06\x83\xa3\x25\x37\xab\x62\x1e\x27\x72\x33\x5a\x5a\x58\x8e\x84\x34\x78\xb2\x61\xb9\x1e\xad\xcb\xa3\x20\x0a\x82\xd1\x08\x6e\x1f\x05\xe4\x4a\x96\x3c\x45\x0d\x28\x0c\x37\x1c\xf5\xd0\x02\x4b\x0a\x14\x46\x0f\xc9\x3d\xe0\x22\xc5\x47\xd4\x30\x67\xc9\xda\x27\x1c\xd6\xb8\x3d\x29\x59\x56\x20\xc9\xd1\x46\x2a\x8c\x83\xd1\x88\x7e\xfc\xaa\xd9\x12\xc7\xc1\x68\x54\x55\x16\x96\x96\x1b\xe2\x8b\x46\xe8\xed\x36\x47\x0d\xa7\x75\x4d\xc4\x40\x7e\xcc\x7e\x63\xaa\xae\x87\x80\x4a\xc1\x78\x42\x56\x55\xb7\x8f\x62\x0c\xe6\x51\xd4\x71\x55\x79\xff\x5a\x01\xe1\x69\x14\xcf\x12\x26\xc2\xbb\xfb\x75\x19\x5f\x91\xd9\xdb\xea\xaf\x43\xf8\xcb\x9b\x3a\xb2\x6a\x51\xa4\x75\x1d\x98\x6d\x8e\xd6\x43\x6d\x54\x91\x18\xa8\x82\xc1\xba\x8c\x6f\x1f\x45\x30\xc8\x99\x22\x5f\xa5\x80\x56\x40\x50\xdb\x88\xfc\xd2\xbe\x51\x68\x0a\x25\xb4\xcd\xa4\x23\x01\xb3\x62\x86\xc0\x59\x50\x61\x33\x0d\x0c\x3a\x41\x04\x1b\x96\x65\x20\x73\x4a\x22\x21\x21\x0e\x16\x85\x48\x20\xd4\x64\x44\xd4\x49\x0e\xa3\x4e\x2b\x19\xe5\x14\x81\x8e\x5b\x61\xde\x96\x4f\xdc\xac\x9e\xda\xc3\x40\xe0\x83\xf5\xcb\x46\x17\xc9\x10\xb2\xf1\x1b\x4c\xd9\x11\x1c\x62\x67\x4e\x04\xc7\x24\xb8\x0a\x06\x3d\x6b\x60\x02\xd8\x5a\xf9\x4a\x07\x75\x50\x55\x8a\x89\x25\xee\xe7\xb4\xae\xab\xca\xe0\x26\xcf\x98\x41\x38\x6a\x41\x74\x04\x31\xbd\xb1\x49\x69\x72\xd3\x2b\x86\x8e\xce\x21\x62\x86\xa6\x4d\x39\x68\x34\xce\xbb\xee\x11\xd3\x5a\x26\xdc\xd6\x89\x0f\x80\x91\x50\x36\xe0\xbb\x90\x4a\xa1\xce\xa5\x48\xa9\x4e\x1b\xe0\x32\x85\x50\xe4\x29\x31\x75\xa1\x38\xb6\xb1\xe8\xab\xeb\x87\x62\x08\x25\x54\x15\x5f\x40\x7c\xc9\x15\x26\xe6\x4a\x24\x32\x45\x65\x5d\xc8\x34\xd6\xf5\x71\xeb\x92\xe7\x8e\x08\xbf\x52\x59\x9c\xe1\x96\x80\xbc\x61\x6b\x0c\xd7\x65\xfc\x8b\xc2\x05\x7f\x1c\xc2\xdb\xd7\x6f\x5e\xbf\x8d\x76\x82\x1b\x3b\xb9\xe7\x26\x5c\xe3\x36\x0a\x06\x54\xd5\x96\xda\xc9\xdc\x79\x7d\xf7\x76\x7c\x1f\x05\x03\xdc\x7d\x78\x76\x6a\x9f\x56\x15\x90\xb1\x53\xef\x71\x5d\x97\x4c\x81\xcc\xd2\x2e\x72\xc1\x80\x2f\x9a\x12\xd3\xf1\x7b\xb4\xec\x43\xa2\x89\x2f\x91\x04\x46\xef\xec\xeb\xef\x26\x20\x78\x46\x6e\x34\x49\x47\xa5\x82\xc1\x1e\xff\xac\xe1\x2f\xbd\x39\x61\xf4\x55\xfe\x0c\xd7\xc4\x9c\xa1\xf0\xde\xb6\xd1\xa6\x92\x3e\xe4\x15\x05\x72\x42\xe3\x05\x45\xea\xd4\xad\xcb\x78\xa7\x11\x34\xca\xe3\x38\x8e\x82\x01\x39\x1d\x06\x83\x41\xc6\xd7\xd0\x57\x34\x40\x0d\x5d\x6e\x67\x34\xd8\x82\x41\x54\x55\xe0\x81\xdc\x85\x2d\x08\x06\xd4\xc3\x2c\x58\x7a\xa8\xb3\x48\x6a\xec\x21\x03\xc7\x19\xae\xef\xe3\x73\x6b\x59\x67\xd0\x5e\xfa\xa2\x60\x40\xc5\xf8\xcf\x21\xf0\x92\x3c\x77\xda\x28\xe2\x55\x15\xff\x8c\x66\x25\x53\x8f\xbc\xc8\xc6\x6b\xdf\xdd\xbb\x71\xc6\xd7\xf7\xc4\xbd\xe7\xe7\xe1\x54\xa2\x7e\x36\x93\x3b\xa9\xa0\x5c\x58\x09\x3a\xfe\x88\x1b\x59\x62\x88\x4e\xff\xe1\x0c\xa3\x7e\x21\xc5\x7b\x92\xad\xe8\xda\x66\xfb\x80\xe7\xe5\xff\x8c\xdf\x53\xa1\x51\x99\x3f\xc5\x6f\xff\x5c\xf0\xac\xaa\x00\x45\x0a\xd4\x23\x80\x9a\x06\xd4\x75\xdb\xec\x0f\xd5\x4f\x4b\xef\x07\xc0\xfb\x7e\x2b\xec\xcf\xa3\x17\xba\x61\xd3\x08\xa7\x0b\x10\xb2\x47\xb8\x62\x1a\xe6\x88\x82\x76\xa0\x8c\x27\xdc\x64\x5b\xea\xae\x76\x58\xa0\x1b\xf3\x3b\xea\x1e\x78\x96\x79\x9d\x24\x8e\xb4\x2a\xd4\x45\x66\x68\x87\x4c\x29\xda\xd4\x60\x59\x4f\xc3\x42\xc9\x0d\x2d\x6a\xb8\xc9\xcd\x16\x34\xd5\x18\xd1\xce\xb7\x06\xf5\x7e\xd7\x7d\xff\x4c\xd7\x8d\x20\x6c\x9f\x0f\x5d\x3f\xb5\x19\xa2\xba\x2e\xfb\xad\xac\xd4\xc3\x1d\x20\xb4\xaf\x6c\x6d\xef\x6c\x06\x48\x65\xc8\x17\xb6\x1b\x94\x3a\x82\x1f\x26\x70\x66\x53\x58\xc2\x04\x4a\x7d\x77\x7a\xdf\x4f\x5b\x69\xe5\x1e\x48\x80\x15\xdc\x9b\xc2\x3d\xc7\x29\x84\x2c\x59\xb9\x0d\x6a\x4b\x1b\x2f\x79\xfc\xed\x79\xa0\xe0\xf9\xe1\x43\xf9\xe8\xc5\x9c\xb2\x41\xd2\xe6\xb8\xa3\xd9\x2e\x24\xad\x44\x9b\x15\x4c\xff\xe3\x44\xb8\xd0\xa1\x86\x5e\xf4\x22\x08\xef\xee\x0f\xa6\xc4\x5b\xd6\x8c\xb9\x1d\x2a\x0a\x35\xea\x28\xfa\x93\x27\x21\xc5\x8c\x0f\x01\xbb\x06\x83\xda\x66\xf6\xf0\x88\x1c\x3c\xed\x1c\xe1\x2b\xe7\xc6\x1d\xbf\x8f\x9a\x1e\xd2\x75\x99\x03\x7d\x44\xf0\x6c\xd8\x35\x93\x0e\x36\x4e\xcc\x90\xde\x7b\xec\x9c\x67\x59\x1b\x91\x2b\xbf\x5a\xef\x14\xf1\x82\x2b\x6d\x40\xb4\x7b\x77\x93\xcd\x72\x27\xc7\x43\x98\xe3\x92\x0b\x3a\x3b\x48\x6a\x7b\xe8\x39\x6e\x8f\xb8\xa5\x42\x66\xec\xd5\xc1\x04\x1d\x37\xf8\xb9\x60\x19\xed\x45\xc7\xda\x30\x65\x1a\x2c\x9e\x5b\x77\xec\x23\xb0\xbb\xbb\xab\xf2\x39\x02\x17\x06\x55\xae\xd0\xb4\x8b\xad\xb4\x8f\x48\xc6\xbf\x50\xc9\x4e\x82\xe3\x93\x0b\x10\x60\xcf\xc0\x27\x2a\x89\xfc\xa9\x5c\x2f\x98\x2c\xcf\x98\x5a\xa2\x36\x24\x2e\x97\x5a\x73\xba\x1a\xad\xd4\x7d\x6c\x1e\x8a\x60\xe8\xac\x3f\xee\xed\x69\x82\xb4\x44\xb0\x07\x5c\xd7\x1e\x3a\xb8\xe6\x16\x4b\xcf\x60\xf1\x39\x24\x3a\xa6\x97\xc0\xe8\x28\x3c\x1e\x39\x45\xcc\x02\xcc\x11\x4f\x0d\x2d\xe0\x52\x35\x54\xe3\xb3\x53\x22\x4b\x71\x81\x0a\x88\x38\xbe\xe4\x3a\x61\x2a\x0d\xfd\xea\xc2\x12\x53\xb0\x6c\x66\x5d\xec\x2e\x13\x82\xa3\x73\x7b\xe2\x00\xf9\xe5\x8b\x4f\x2c\x3d\x38\xb5\xf8\xec\x73\x4e\xe0\x2c\x18\xd4\x6e\xe2\x3c\x7d\xe7\x38\x2d\x76\xe7\x4e\xc8\x78\xd2\x57\xdc\x8e\x23\x5f\x5f\x64\xe6\x0c\x71\x1d\x3a\xea\xe8\x9d\x7b\xf4\x1b\xcb\x78\x1a\x46\xf0\xea\x15\x84\x02\xbe\x27\x3b\xbe\x7c\x69\x0a\x1f\xbe\x07\xd1\x10\x5e\xe3\xa3\xf1\x63\x9e\x5c\xc4\xbe\x63\x03\xf4\x45\x17\x5a\xd2\x9f\x70\x1b\x46\x7e\x5b\x6b\xd7\x01\x3a\x48\xa9\x28\xeb\x5e\x1c\x7c\x61\xbe\x7a\xd5\x2a\xfc\xc1\xc7\xa1\x89\x0b\xa0\xbe\xf3\xef\x4e\xce\xee\xe1\xb5\x0d\x49\x53\xad\x41\xdd\x5e\x30\x7e\xf1\xab\x5d\xcd\x36\x28\xfb\x99\x99\x64\xc5\xc5\xb2\xaa\xba\x65\xd3\x65\xfe\xe9\x3c\x6e\xcb\xd7\x96\xe6\x53\x0e\x87\x6d\x5f\xdd\xbe\x5b\x30\xd8\x78\x0d\xc4\x40\xc7\xd3\xd5\x63\xae\x9a\x19\x6a\x56\xc8\x15\xec\x6d\x4a\xb0\xb1\x3f\x9a\x42\xbc\x5d\x35\xb3\x08\x53\xe8\x6d\xb5\x74\x9e\xb2\x4c\x21\x4b\xb7\xa0\xa5\x3a\x70\xf0\x7c\x83\x8f\x61\xb9\x6b\x5e\x04\xe1\xee\x0e\xdd\x9f\x07\x2f\x75\xfa\xe7\x2b\xac\xed\xf5\xad\x0d\x5f\x6b\xfa\x5f\xbd\x19\x5e\x1c\x1c\x67\x6f\x9f\xb9\x2b\xf6\x37\x4d\x8b\x55\xfd\xe4\x66\x68\x96\x3e\x3d\x3c\xbc\x80\x06\xbb\x40\xfa\x71\xfb\xcd\x10\x22\xf6\xe7\x51\x24\x55\x8a\xfe\xa3\x9b\x5f\x04\x7b\xe8\xf1\x34\x1d\x88\xbc\xac\x17\x70\xf4\x11\x99\x5d\xe4\xec\x90\xd1\xc0\x0c\x24\x85\xd2\x52\xb9\x0d\x04\x45\xaa\xe1\x61\x85\xc2\x35\x6e\x14\x4b\xb3\x6a\xbe\x21\xee\xa1\xcf\x7e\x06\x6a\x10\xd8\x4d\x06\x11\xc3\x27\xe2\x57\x5e\x0f\xd7\xf6\x93\xa6\xfd\x74\x89\x06\x87\x5e\x9d\xfd\xaa\xe2\x0e\x74\xd0\x45\xb2\x72\x2b\x27\x33\x50\x68\xcb\x65\xbf\x77\x32\xd0\xc5\x1c\x3f\x17\x28\x0c\x24\x2c\xb3\xd3\xc6\x06\xb8\x59\x59\x65\x91\xa5\x4d\x89\x09\x7c\x34\x60\x57\xd7\x26\xba\xcf\x15\xc2\x8b\x39\x0a\xbd\x7d\x34\x70\x6c\xaf\xb8\xf0\xe1\xf9\x63\x53\xe7\xff\xaa\x28\x9e\x1d\x5f\xce\x9e\xc3\x63\xab\x9b\x0f\x2e\x52\xd4\xc4\xdd\xbe\xfd\xdd\xce\x9c\xe8\x3e\x07\xd8\x46\x4c\xe5\x35\x2f\x16\x4f\xea\xcb\x6f\x5e\x93\x76\xc8\x14\x18\xce\x8b\xc5\x57\xbe\x50\x34\xd3\xc1\x9b\x70\xb3\x58\xd0\x4a\xfd\xbd\x9d\x0e\xf3\x62\xe1\xb4\xef\x0f\x95\x79\xb1\xb8\xdb\x61\x18\xdf\x77\x47\x66\x3b\x57\x26\x20\xdc\x02\xb8\x2b\xfb\xf5\x04\x84\x3f\x1c\xbb\x11\xe4\x29\x9d\x26\xd4\x77\x63\x71\xdf\x9c\x86\xad\xa1\xbd\xe3\xb8\x37\x1e\x77\x87\xea\xd3\xc9\xf9\xad\x61\xd9\x51\x77\xc8\x73\xef\x69\x97\xb3\x8e\xa2\x7b\x76\x77\x3a\x3e\xa5\x2b\xbc\x9d\xcd\x7f\x3c\x3e\x93\x2e\xf6\x27\x10\x36\xd4\x27\x20\xa2\xff\x26\x6a\xcf\xe9\xe8\x0f\x76\xf7\x81\xb1\xf9\xfb\xef\x00\x00\x00\xff\xff\x5b\xb4\xd0\x30\xa9\x19\x00\x00")

func templatesKvschemaGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesKvschemaGotmpl,
		"templates/kvschema.gotmpl",
	)
}

func templatesKvschemaGotmpl() (*asset, error) {
	bytes, err := templatesKvschemaGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/kvschema.gotmpl", size: 6569, mode: os.FileMode(420), modTime: time.Unix(1564962338, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/kvschema.gotmpl": templatesKvschemaGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"kvschema.gotmpl": &bintree{templatesKvschemaGotmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

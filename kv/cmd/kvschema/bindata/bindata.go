// Package bindata Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// templates/kvschema.gotmpl
package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesKvschemaGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\xdd\x6f\xdb\x46\x12\x7f\x16\xff\x8a\xa9\x1f\x02\xd2\x91\x29\x3b\x38\xe0\x72\x4a\x55\xc0\xb5\x7d\x39\xa1\xa9\x5d\x44\x6e\x83\xc2\x30\x0e\x2b\x72\x24\x2d\x44\xed\x32\xbb\x4b\xda\x3a\x86\xff\xfb\x61\x76\x97\x1f\xb2\x64\xa7\x41\x51\xe0\xee\x25\xb1\x96\xb3\xf3\xf9\x9b\xaf\xad\xaa\xd1\x31\x04\x17\x32\xdf\x2a\xbe\x5c\x19\x78\x73\x7a\xf6\x0f\x78\x2f\xe5\x32\x43\xf8\xf0\xe1\x22\x08\x3e\xf0\x04\x85\xc6\x14\x0a\x91\xa2\x02\xb3\x42\x38\xcf\x59\xb2\x42\xf0\x5f\x86\xf0\x1b\x2a\xcd\xa5\x80\x37\xf1\x29\x84\x44\x70\xe4\x3f\x1d\x45\xef\x82\xad\x2c\x60\xc3\xb6\x20\xa4\x81\x42\x23\x98\x15\xd7\xb0\xe0\x19\x02\x3e\x26\x98\x1b\xe0\x02\x12\xb9\xc9\x33\xce\x44\x82\xf0\xc0\xcd\xca\x0a\xf1\x2c\xe2\xe0\x77\xcf\x40\xce\x0d\xe3\x02\x18\x24\x32\xdf\x82\x5c\xf4\xa9\x80\x99\x20\x00\x00\x58\x19\x93\xeb\xf1\x68\xf4\xf0\xf0\x10\x33\xab\x66\x2c\xd5\x72\x94\x39\x32\x3d\xfa\x30\xbd\xb8\xba\x9e\x5d\x9d\xbc\x89\x4f\x83\xe0\x57\x91\xa1\xd6\xa0\xf0\x73\xc1\x15\xa6\x30\xdf\x02\xcb\xf3\x8c\x27\x6c\x9e\x21\x64\xec\x01\xa4\x02\xb6\x54\x88\x29\x18\x49\x8a\x3e\x28\x6e\xb8\x58\x0e\x41\xcb\x85\x79\x60\x0a\x83\x94\x6b\xa3\xf8\xbc\x30\x3b\x1e\x6a\xd4\xe2\x1a\xfa\x04\x52\x00\x13\x70\x74\x3e\x83\xe9\xec\x08\x7e\x3c\x9f\x4d\x67\xc3\xe0\xd3\xf4\xf6\x5f\x37\xbf\xde\xc2\xa7\xf3\x8f\x1f\xcf\xaf\x6f\xa7\x57\x33\xb8\xf9\x08\x17\x37\xd7\x97\xd3\xdb\xe9\xcd\xf5\x0c\x6e\xfe\x09\xe7\xd7\xbf\xc3\x4f\xd3\xeb\xcb\x21\x20\x37\x2b\x54\x80\x8f\xb9\x22\xdd\xa5\x02\x4e\xbe\xc3\x34\x0e\x66\x88\x3b\xc2\x17\xd2\x29\xa3\x73\x4c\xf8\x82\x27\x90\x31\xb1\x2c\xd8\x12\x61\x29\x4b\x54\x82\x8b\x25\xe4\xa8\x36\x5c\x53\xf4\x34\x30\x91\x06\x19\xdf\x70\xc3\x8c\xfd\xbd\x67\x4e\x1c\x1c\x8f\xea\x3a\x08\xaa\x2a\xc5\x05\x17\x08\x47\xeb\x52\x27\x2b\xdc\xb0\x78\x29\x8f\xea\x7a\x34\x82\x0b\x99\x22\x2c\x51\xa0\x62\xc6\x79\xb4\xa5\x39\x7a\x07\x97\x37\x70\x7d\x73\x0b\x57\x97\xd3\xdb\x38\x08\x72\x96\xac\x49\x9b\xaa\x8a\x7f\x71\x7f\xc6\xd7\x6c\x83\x24\x81\x6f\x72\xa9\x0c\x84\xc1\xe0\x68\xc9\xcd\xaa\x98\xc7\x89\xdc\x8c\x96\x16\x96\x23\x21\x0d\x9e\x6c\x58\xae\x47\xeb\xf2\x28\x88\x82\x60\x34\x82\x99\x91\x0a\x21\x57\xb2\xe4\x29\x6a\x40\x61\xb8\xe1\xa8\x87\x16\x5a\x52\xa0\x30\x7a\x48\x06\x02\x17\x29\x3e\xa2\x86\x39\x4b\xd6\x3e\xe4\xb0\xc6\xed\x49\xc9\xb2\x02\x89\x93\x26\x4e\x71\x30\x1a\xd1\x8f\x5f\x35\x5b\xe2\x38\x18\x8d\xaa\xca\x02\xd3\xde\x86\xf8\xa2\x61\x7a\xbb\xcd\x51\xc3\x69\x5d\x13\x31\x90\x25\xb3\xdf\x98\xaa\xeb\x21\xa0\x52\x30\x9e\x38\xbd\x2a\xfb\xef\xd8\xb1\xae\xe3\xaa\xf2\x76\xb6\x6c\xc2\xd3\x28\x9e\x25\x4c\x84\x77\xf7\xeb\x32\xbe\x22\xe5\xb7\xd5\xdf\x87\xf0\xb7\x37\x75\x64\x85\xa3\x48\xeb\x3a\x30\xdb\x1c\xbd\xa5\xda\xa8\x22\x31\x50\x05\x83\x75\x19\xdb\xa3\x60\x90\x33\x45\x56\x4b\x01\x2d\x93\xa0\xb6\xde\xf9\xa5\xfd\xa2\xd0\x14\x4a\x68\x1b\x55\x47\x02\x66\xc5\x0c\x01\xb5\xa0\x24\x67\x1a\x18\x74\x8c\x08\x42\x2c\xcb\x40\xe6\x14\x50\x42\x45\x1c\x2c\x0a\x91\x40\xa8\x9d\x22\x51\xc7\x3b\x8c\x3a\xb9\xa4\x98\x13\x05\x3a\x6e\xd9\x79\x6d\x3e\x71\xb3\xda\xd7\x88\x81\xc0\x07\x6f\x9d\xf5\x35\x92\x32\xa4\xe7\x37\xa9\xb3\xc3\x3c\xc4\x4e\xa5\x08\x8e\x1d\xf3\x2a\x18\xf4\x74\x82\x09\x60\xab\xeb\x2b\x1d\xd4\x41\x55\x29\x26\x96\xf8\x34\xca\x75\x5d\x55\x06\x37\x79\xc6\x0c\xc2\x51\x0b\xab\x23\x88\xe9\x8b\x0d\x50\x13\xa7\x5e\x82\x74\x74\x0e\x23\x33\x34\x6d\xf8\x41\xa3\x71\x16\x76\x47\x4c\x6b\x99\x70\x9b\x3b\xde\x09\x46\x42\xd9\xc0\xf1\x42\x2a\x85\x3a\x97\x22\xa5\xdc\x6d\xa0\xcc\x14\x42\x91\xa7\x74\xa9\x73\xc7\xb1\xf7\x47\x5f\x60\xdf\x1d\x43\x28\xa1\xaa\xf8\x02\xe2\x4b\xae\x30\x31\x57\x22\x91\x29\x2a\x6b\x44\xa6\xb1\xae\x8f\x5b\xa3\xfc\xed\x88\x30\x2d\x95\xc5\x1c\x6e\x09\xdc\x1b\xb6\xc6\x70\x5d\xc6\xbf\x28\x5c\xf0\xc7\x21\xbc\x7d\xfd\xe6\xf5\xdb\x68\xc7\xbd\xb1\xe3\x7b\x6e\xc2\x35\x6e\xa3\x60\x40\xb9\x6e\xa9\x1d\xcf\x9d\xcf\x77\x6f\xc7\xf7\x51\x30\xc0\xdd\xc3\xb3\x53\x7b\x5a\x55\x40\xca\x4e\xbd\xcd\x75\x5d\x32\x05\x32\x4b\x3b\xdf\x05\x03\xbe\x68\xd2\x4e\xc7\xef\xd1\x5e\x1f\x12\x4d\x7c\x89\xc4\x30\x7a\x67\x3f\x7f\x37\x01\xc1\x33\x32\xa3\x09\x3b\x2a\x15\x0c\x9e\xdc\x9f\x35\xf7\x4b\xaf\x4e\x18\x7d\xf5\x7e\x86\x6b\xba\x9c\xa1\xf0\xd6\xb6\xde\xa6\x04\x3f\x64\x15\x39\x72\x42\x4d\x07\x45\xea\xc4\xad\xcb\x78\xa7\x2c\x34\xc2\xe3\x38\x8e\x82\x01\x19\x1d\x06\x83\x41\xc6\xd7\xd0\x17\x34\x40\x0d\x5d\x6c\x67\xd4\xee\x82\x41\x54\x55\xe0\xa1\xdc\xb9\x2d\x08\x06\x54\xd7\x2c\x5c\x7a\xb8\xb3\x58\x6a\xf4\x21\x05\xc7\x19\xae\xef\xe3\x73\xab\x59\xa7\xd0\x93\xf0\x45\xc1\x80\x52\xf2\xdf\x43\xe0\x25\x59\xee\xa4\x91\xc7\xab\x2a\xfe\x19\xcd\x4a\xa6\x1e\x79\x91\xf5\xd7\x53\x73\xef\xc6\x19\x5f\xdf\xd3\xed\x27\x76\x1e\x0e\x25\xea\x67\x23\xb9\x13\x0a\x8a\x85\xe5\xa0\xe3\x8f\xb8\x91\x25\x86\xe8\xe4\x1f\x8e\x30\xea\x17\x42\xfc\x84\xb3\x65\x5d\xdb\x68\x1f\xb0\xbc\xfc\x9f\xb1\x7b\x2a\x34\x2a\xf3\x97\xd8\xed\xcf\x05\xcf\xaa\x0a\x50\xa4\x40\x35\x02\xa8\x68\x40\x5d\xb7\x45\xff\x50\xfe\xb4\xf4\xbe\x11\xbc\xef\x17\xc3\x7e\x67\x7a\xa1\x1e\x36\xa5\x70\xba\x00\x21\x7b\x84\x2b\xa6\x61\x8e\x28\x68\x32\xca\x78\xc2\x4d\xb6\xa5\xfa\x6a\x5b\x06\xba\xd6\xbf\x23\xee\x81\x67\x99\x97\x49\xec\x48\xaa\x42\x5d\x64\x86\x26\xcb\x94\xbc\x4d\x25\x96\xf5\x24\x2c\x94\xdc\xd0\xf8\x86\x9b\xdc\x6c\x41\x53\x8e\x11\xed\x7c\x6b\x50\xef\xd7\xdd\xf7\xcf\xd4\xdd\x08\xc2\xf6\x7c\xe8\x2a\xaa\x8d\x11\x65\x76\xd9\x2f\x66\xa5\x1e\xee\x40\xa1\xfd\x64\xb3\x7b\x67\x52\x40\x4a\x44\xbe\xb0\xf5\xa0\xd4\x11\xfc\x30\x81\x33\x1b\xc4\x12\x26\x50\xea\xbb\xd3\xfb\x7e\xe0\x4a\xcb\xf7\x40\x08\x2c\xe3\x5e\x3f\xee\x99\x4e\x4e\x64\xc9\xca\xcd\x55\x5b\x9a\x84\xc9\xe6\x6f\x8f\x04\xb9\xcf\xb7\x1f\x8a\x48\xcf\xeb\x14\x0f\xe2\x36\xc7\x1d\xc9\x76\x38\x69\x39\xda\xb8\x60\xfa\x27\x42\xe1\x9c\x87\x1a\x7a\xfe\x8b\x20\xbc\xbb\x3f\x18\x14\xaf\x5b\xd3\xea\x76\xa8\xc8\xd9\xa8\xa3\xe8\x2f\xee\x86\xe4\x35\x3e\x04\xec\x8a\x0c\x6a\x1b\xdb\xc3\x6d\x72\xb0\x5f\x3d\xc2\x57\xce\x8c\x3b\x7e\x1f\x35\x75\xa4\xab\x34\x07\x6a\x89\xe0\xd9\xb0\x2b\x28\x1d\x70\x1c\x9b\x21\x7d\xf7\xe8\x39\xcf\xb2\xd6\x23\x57\x7e\xe4\xde\x49\xe4\x05\x57\xda\x80\x68\xe7\xf1\x26\x9e\xe5\x4e\x94\x87\x30\xc7\x25\x17\xb4\x90\x10\xd7\x76\x05\x74\xb7\x3d\xe6\x96\x0a\x99\xb1\xfb\x08\x13\xb4\xf6\xe0\xe7\x82\x65\x34\x1d\x1d\x6b\xc3\x94\x69\xd0\x78\x6e\xcd\xb1\x47\x60\x67\x7a\x97\xe9\x73\x04\x2e\x0c\xaa\x5c\xa1\x69\xc7\x5c\x69\x8f\x88\xc7\x7f\x50\xc9\x8e\x83\xbb\x27\x17\x20\xc0\x2e\x88\x7b\x22\x89\x7c\x9f\xaf\x67\x4c\x9a\x67\x4c\x2d\x51\x1b\x62\x97\x4b\xad\x39\xed\x93\x96\xeb\x3e\x3a\x0f\xf9\x30\x74\xfa\x1f\xf7\xa6\x35\x41\x72\x22\x78\x02\x5d\x57\x22\x3a\xc0\xe6\x16\x4d\xcf\xa0\xf1\x39\x2c\xba\x4b\x2f\xc1\xd1\x51\x78\x44\x72\xf2\x99\x85\x98\x23\x9e\x1a\x1a\xc6\xa5\x6a\xa8\xc6\x67\xa7\x44\x96\xe2\x02\x15\x10\x71\x7c\xc9\x75\xc2\x54\x1a\xfa\x01\x86\x25\xa6\x60\xd9\xcc\x9a\xd8\x6d\x2a\x04\x48\x67\xf6\xc4\x41\xf2\xcb\x17\x1f\x5a\x3a\x38\xb5\x08\xed\xdf\x9c\xc0\x59\x30\xa8\x5d\xdf\xd9\xff\xe6\x6e\x5a\xf4\xce\x1d\x93\xf1\xa4\x2f\xb8\x6d\x4a\x3e\xc3\x48\xcd\x19\xe2\x3a\x74\xd4\xd1\x3b\x77\xf4\x1b\xcb\x78\x1a\x46\xf0\xea\x15\x84\x02\xbe\x27\x3d\xbe\x7c\x69\x52\x1f\xbe\x07\xd1\x10\x5e\xe3\xa3\xf1\xcd\x9e\x4c\xc4\xbe\x61\x03\xf4\x69\x17\x5a\xd2\x9f\x70\x1b\x46\x7e\x66\x6b\x87\x02\x5a\x55\x29\x2d\xeb\x9e\x1f\x7c\x6a\xbe\x7a\xd5\x0a\xfc\xc1\xfb\xa1\xf1\x0b\xa0\xbe\xf3\xdf\x4e\xce\xee\xe1\xb5\x75\x49\x93\xaf\x41\xdd\x6e\x32\x7e\xfc\xab\x5d\xd6\x36\x28\xfb\x99\x99\x64\xc5\xc5\xb2\xaa\xba\x91\xd3\x45\x7e\xbf\x2b\xb7\x09\x6c\x93\x73\xff\x86\x43\xb7\xcf\x6f\x5f\x2f\x18\x6c\xbc\x04\xba\x40\x4b\xd4\xd5\x63\xae\x9a\x4e\x6a\x56\xc8\x15\x3c\x99\x97\x60\x63\x7f\x34\xa9\x78\xbb\x6a\xfa\x11\xa6\xd0\x9b\x6d\x69\x5d\x65\x99\x42\x96\x6e\x41\x4b\x75\x70\xf1\xf9\x06\x2b\xc3\x72\x57\xc1\x08\xc2\xdd\x59\xba\xdf\x13\x5e\xaa\xf6\xcf\xe7\x58\x5b\xef\x5b\x1d\xbe\x56\xf8\xbf\xba\x3b\xbc\xd8\x3c\xce\xde\x3e\xb3\x5f\x3c\x9d\x38\x2d\x5a\xf5\xde\xee\xd0\x0c\x7f\x7a\x78\x78\x10\x0d\x76\xa1\xf4\xe3\xf6\x9b\x41\x44\xd7\x9f\xc7\x91\x54\x29\xfa\x27\x39\x3f\x10\xf6\xf0\xe3\x69\x3a\x18\x79\x5e\x2f\x20\xe9\x23\x32\x3b\xd0\xd9\x46\xa3\x81\x19\x48\x0a\xa5\xa5\x72\x73\x08\x8a\x54\xc3\xc3\x0a\x85\x2b\xde\x28\x96\x66\xd5\xbc\x30\x3e\xc1\x9f\x7d\x22\x6a\x30\xd8\x75\x07\x11\xc3\x27\xba\xaf\xbc\x1c\xae\xed\x83\xa7\x7d\xd8\x44\x83\x43\x2f\xce\xbe\xb3\xb8\x55\x1d\x74\x91\xac\xdc\xe8\xc9\x0c\x14\xda\xde\xb2\xaf\xa1\x0c\x74\x31\xc7\xcf\x05\x0a\x03\x09\xcb\x6c\xc7\xb1\x0e\x6e\x46\x57\x59\x64\x69\x93\x64\x02\x1f\x0d\xd8\x11\xb6\xf1\xee\xf3\xa9\xf0\x62\x94\x42\xaf\x21\x35\x1d\x5b\x2f\x2e\xbc\x83\xfe\x58\xe7\xf9\xbf\x4a\x8b\x67\x5b\x98\xd3\xe7\x70\xeb\xea\x7a\x84\xf3\x14\x15\x72\x37\x77\x7f\xb7\xd3\x2b\xba\x87\x01\x5b\x8c\x29\xc1\xe6\xc5\x62\x2f\xc3\xfc\xfc\x35\x69\x1b\x4d\x81\xe1\xbc\x58\x7c\xe5\xad\xa2\xe9\x10\x5e\x85\x9b\xc5\x82\x46\xeb\xef\x6d\x87\x98\x17\x0b\x27\xfd\x69\x63\x99\x17\x8b\xbb\x9d\x0b\xe3\xfb\x6e\xdd\x6c\x7b\xcb\x04\x84\x1b\x03\x77\x79\xbf\x9e\x80\xf0\x2b\x64\xd7\x86\x3c\xa5\x93\x84\xfa\x6e\x2c\xee\x9b\x25\xb1\x55\xb4\xb7\x26\xf7\x5a\xe4\x6e\x63\xdd\xef\x9e\xdf\xea\x96\x1d\x71\x87\x2c\xf7\x96\x76\x31\xeb\x28\xba\xb3\xbb\xd3\xf1\x29\xed\xe3\x6d\x7f\xfe\xe3\xfe\x99\x74\xbe\x3f\x81\xb0\xa1\x3e\x01\x11\xfd\x19\xaf\x3d\x27\xa3\xdf\xdc\xdd\x63\x63\xf3\xff\x7f\x03\x00\x00\xff\xff\x7f\x7e\x8b\x48\xc9\x19\x00\x00")

func templatesKvschemaGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesKvschemaGotmpl,
		"templates/kvschema.gotmpl",
	)
}

func templatesKvschemaGotmpl() (*asset, error) {
	bytes, err := templatesKvschemaGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/kvschema.gotmpl", size: 6601, mode: os.FileMode(420), modTime: time.Unix(1564541392, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/kvschema.gotmpl": templatesKvschemaGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"kvschema.gotmpl": &bintree{templatesKvschemaGotmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

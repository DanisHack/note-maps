// Package bindata Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// templates/kvschema.gotmpl
package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesKvschemaGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x5f\x6f\xdb\xba\x15\x7f\x36\x3f\xc5\xb9\x7e\x18\xa4\xd6\x95\xd3\x3e\x75\xe9\x32\xc0\x37\xc9\x3a\xa3\xbd\xc9\x45\x9d\xde\xe2\x22\x08\x06\x5a\x3a\xb2\x09\xcb\xa4\x4a\x52\x4a\x3c\x41\xdf\x7d\x38\x14\xf5\xc7\x8e\x93\xac\x1b\x2e\xb0\x3d\x25\x26\xcf\xdf\xdf\x39\xfc\xf1\x50\x55\x35\x7d\x05\xec\x5c\xe5\x3b\x2d\x56\x6b\x0b\xef\x4e\xde\xfe\x19\x3e\x2a\xb5\xca\x10\x3e\x7f\x3e\x67\xec\xb3\x88\x51\x1a\x4c\xa0\x90\x09\x6a\xb0\x6b\x84\x59\xce\xe3\x35\x82\xdf\x99\xc0\x6f\xa8\x8d\x50\x12\xde\x45\x27\x10\x90\xc0\xd8\x6f\x8d\xc3\x0f\x6c\xa7\x0a\xd8\xf2\x1d\x48\x65\xa1\x30\x08\x76\x2d\x0c\xa4\x22\x43\xc0\x87\x18\x73\x0b\x42\x42\xac\xb6\x79\x26\xb8\x8c\x11\xee\x85\x5d\x3b\x27\xde\x44\xc4\x7e\xf7\x06\xd4\xd2\x72\x21\x81\x43\xac\xf2\x1d\xa8\x74\x28\x05\xdc\x32\x06\x00\xb0\xb6\x36\x37\xa7\xd3\xe9\xfd\xfd\x7d\xc4\x5d\x98\x91\xd2\xab\x69\xd6\x88\x99\xe9\xe7\xf9\xf9\xe5\xd5\xe2\xf2\xcd\xbb\xe8\x84\xb1\xaf\x32\x43\x63\x40\xe3\xf7\x42\x68\x4c\x60\xb9\x03\x9e\xe7\x99\x88\xf9\x32\x43\xc8\xf8\x3d\x28\x0d\x7c\xa5\x11\x13\xb0\x8a\x02\xbd\xd7\xc2\x0a\xb9\x9a\x80\x51\xa9\xbd\xe7\x1a\x59\x22\x8c\xd5\x62\x59\xd8\x3d\x84\xda\xb0\x84\x81\xa1\x80\x92\xc0\x25\x8c\x67\x0b\x98\x2f\xc6\xf0\xf3\x6c\x31\x5f\x4c\xd8\xb7\xf9\xcd\xdf\xaf\xbf\xde\xc0\xb7\xd9\x97\x2f\xb3\xab\x9b\xf9\xe5\x02\xae\xbf\xc0\xf9\xf5\xd5\xc5\xfc\x66\x7e\x7d\xb5\x80\xeb\xbf\xc1\xec\xea\x77\xf8\x34\xbf\xba\x98\x00\x0a\xbb\x46\x0d\xf8\x90\x6b\x8a\x5d\x69\x10\x84\x1d\x26\x11\x5b\x20\xee\x39\x4f\x55\x13\x8c\xc9\x31\x16\xa9\x88\x21\xe3\x72\x55\xf0\x15\xc2\x4a\x95\xa8\xa5\x90\x2b\xc8\x51\x6f\x85\xa1\xea\x19\xe0\x32\x61\x99\xd8\x0a\xcb\xad\xfb\xfd\x28\x9d\x88\xbd\x9a\xd6\x35\x63\x55\x95\x60\x2a\x24\xc2\x78\x53\x9a\x78\x8d\x5b\x1e\xad\xd4\xb8\xae\xa7\x53\x38\x57\x09\xc2\x0a\x25\x6a\x6e\x1b\x44\x3b\x99\xf1\x07\xb8\xb8\x86\xab\xeb\x1b\xb8\xbc\x98\xdf\x44\x8c\xe5\x3c\xde\x50\x34\x55\x15\xfd\xda\xfc\x1b\x5d\xf1\x2d\x92\x07\xb1\xcd\x95\xb6\x10\xb0\xd1\x78\x25\xec\xba\x58\x46\xb1\xda\x4e\x57\xae\x2d\xa7\x52\x59\x7c\xb3\xe5\xb9\x99\x6e\xca\x31\x0b\x19\x9b\x4e\xe1\xe6\x41\x42\xae\x55\x29\x12\x34\x80\xd2\x0a\x2b\xd0\x4c\x5c\x63\x29\x89\xd2\x9a\x09\xa5\x07\x42\x26\xf8\x80\x06\x96\x3c\xde\xf8\x82\xc3\x06\x77\x6f\x4a\x9e\x15\x08\xc6\x2a\x8d\x11\xb3\xbb\x1c\x9d\x41\x63\x75\x11\xdb\x0a\x36\x65\xf4\x2b\xd7\x64\x53\x49\x4c\xa0\x66\x2c\x2d\x64\x0c\x57\x78\x1f\x58\xda\xbc\x79\x90\xa1\x53\xa8\x40\xa3\x2d\xb4\xa4\x1f\xd5\xbe\x56\x65\x27\x70\x52\xd7\x50\xb3\xaa\xd2\x5c\xae\x10\xa2\xf3\x36\xb8\x9b\x5d\x8e\xa6\xae\xab\xca\xe2\x36\xcf\xb8\x45\x18\x77\x81\x8f\x21\xa2\x1d\x94\x49\xf7\x67\x58\x80\x5e\xae\xae\x09\x87\x05\xda\xaa\xf2\x30\x82\x41\x6b\x5c\xfd\xfa\x25\x6e\x8c\x8a\x85\xab\x8d\x3b\x69\x48\x8d\x5d\x46\x6c\x3a\x65\xae\x7a\x5a\xa3\xc9\x95\x4c\xa8\x37\x5a\xb0\xb8\x46\x28\xf2\x84\x94\xa2\x26\xf3\xc0\x80\xcb\x79\xe8\x2d\x40\x82\xe2\x92\xa0\xdf\x4d\xa0\x84\xaa\x12\x29\x44\x17\x42\x63\x6c\x2f\x65\xac\x12\xd4\x2e\x83\xcc\x60\x5d\xbf\xea\x32\xf2\xda\x21\xa0\xd6\x4a\x43\xc5\x46\x1b\xdc\xc1\xe9\x19\x6c\xf9\x06\x03\xc2\x50\x63\x2a\x1e\x26\xf0\xfe\xf5\xbb\xd7\xef\x43\x36\x32\x3d\xaa\x51\x63\x77\x66\x83\x0d\xee\x42\x36\xa2\x46\x72\xd2\x8d\xcd\xbd\xed\xdb\xf7\xa7\x77\x21\x1b\xe1\xfe\xe2\xdb\x13\xb7\x5a\x55\x40\xc1\xce\x7d\xc2\x75\x5d\x72\x0d\x2a\x4b\x7a\xe0\xd8\x48\xa4\x14\x22\x45\x66\xa2\x8f\xe8\xd4\x27\x24\x13\x5d\x20\x19\x0c\x3f\xb8\xed\x9f\xce\x40\x8a\x8c\xd2\x18\xf9\x56\x40\xad\xd9\xe8\x40\x7f\xd1\xea\x97\x3e\x9c\x20\x7c\x51\x3f\xc3\x0d\x29\x67\x28\x7d\xb6\x1d\xda\xc1\x49\x78\x34\x2b\x02\xf2\x8c\x18\x0d\x65\xd2\xb8\xdb\x94\x7d\xd3\xf5\x5a\x41\x18\x45\x51\xc8\x46\x94\x74\xc0\x46\xa3\x4c\x6c\x60\xe8\x68\x84\x06\xfa\xda\x2e\x88\x4b\xd9\x28\xac\x2a\xf0\x7d\xdc\xc3\xc6\xd8\x68\x3a\x85\xaf\xae\x57\x06\x4d\xe7\x1a\xa9\x8d\x87\x02\x3c\xcd\x70\x73\x17\xcd\x5c\x64\x7d\x40\x07\xe5\x0b\xd9\x88\x18\xec\x1f\x13\x10\x25\x65\xde\x78\x23\xc4\xab\x2a\xfa\x05\xed\x5a\x25\xbe\xf3\x42\x87\xd7\x61\xba\xb7\xa7\x99\xd8\xdc\x91\xf6\x41\x9e\xc7\x4b\x89\xe6\xc9\x4a\xee\x95\x82\x6a\xe1\x2c\x98\xe8\x0b\x6e\x55\x89\x01\x36\xfe\x8f\x57\x18\xcd\x33\x25\x3e\xb0\xec\x4c\xd7\xae\xda\x47\x32\x2f\xff\x67\xf2\x9e\x4b\x83\xda\xfe\x21\x79\xfb\x75\x29\xb2\xaa\x02\x94\x09\x10\x47\x00\x91\x06\xd4\xb5\xdf\x3c\x7e\x7e\x3a\x79\x56\xbb\x1b\xe1\xe3\x90\x09\x1b\xcd\x17\xc9\xb0\xe5\xc1\x79\x0a\x52\x0d\x04\xd7\xdc\xc0\x12\x51\xd2\xb5\x9b\x89\x58\xd8\x6c\x47\xe4\xea\x6e\x58\x6c\x6e\x96\x3d\x77\xf7\x22\xcb\xbc\x4f\x32\x47\x5e\x35\x9a\x22\xb3\x34\xb6\x24\x84\x36\xf1\x2b\x1f\x78\x48\xb5\xda\xd2\x6c\x80\xdb\xdc\xee\xc0\xd0\x19\x23\xd9\xe5\xce\xa2\x39\x20\xdd\x8f\x4f\x90\x6e\x08\x41\xb7\x3e\x69\xe8\xd4\x15\x88\x8e\x75\x39\x64\xb2\xd2\x4c\xf6\xfa\xa0\xdb\x72\x47\x3b\xb8\xbd\xeb\x4c\x56\x48\xa7\x50\xa4\x8e\x0c\x4a\x13\xc2\x5f\xcf\xe0\xad\xab\x60\x09\x67\x50\x9a\xdb\x93\xbb\x61\xd5\x4a\x67\xf7\x08\xfe\xce\x70\x57\x84\xbd\xbc\x09\x41\x1e\xaf\x9b\x3b\x7b\x47\x33\x16\x25\xfc\xe3\x65\x20\xec\xfc\xdd\x43\xe5\x18\x40\x4e\xc5\x20\x6b\x4b\xdc\xf3\x6c\xd7\xdc\xf6\x16\x5d\x51\x30\xf9\x4f\xeb\xd0\x20\x87\x06\x06\xe0\x85\x10\xdc\xde\x1d\xad\x88\x0f\xac\xbd\xe4\xf6\xa4\x08\x69\x34\x61\xf8\x07\xdf\x83\x04\x99\x98\x00\xf6\xf4\x82\xc6\x15\xf6\xf8\x05\x39\x7a\xcc\x1b\xc1\x9f\x9a\x34\x6e\xc5\x5d\xd8\x32\x48\xcf\x31\x47\x58\x44\x8a\x6c\xd2\x53\x49\xdf\x35\x8d\x99\x09\xed\xfb\xd6\x99\x65\x59\x87\xc8\xa5\x9f\xe5\xf6\x8e\x70\x2a\xb4\xb1\x20\xbb\x41\xaf\x2d\x66\xb9\x57\xe2\x09\x2c\x71\x25\x24\xcd\xb9\x64\xb5\x7b\x59\x34\xda\xbe\xe1\x56\x1a\xb9\x75\x63\x2e\x97\x34\x4d\xe3\xf7\x82\x67\x34\x14\xbd\x32\x96\x6b\xdb\xb6\xe2\xcc\xa5\xe3\x96\xa0\x19\x16\xdd\x19\x5f\x22\x08\x69\x51\xe7\x1a\x89\x45\x38\x35\x77\xae\xdc\x12\xd9\xf8\x27\x6a\xd5\x5b\x68\xf4\x54\x0a\x12\xdc\xbb\xe3\x91\x4b\x12\x7f\x6c\xd7\x1b\xa6\xc8\x33\xae\x57\x68\x2c\x99\xcb\x95\x31\x82\x9e\x29\xce\xea\x41\x6b\x1e\x03\x30\x68\x82\x7f\x35\x18\xd2\x24\x39\x09\xe1\xa0\x6f\x1b\x72\x18\x76\xab\x67\xdd\x59\x96\x75\x97\x75\x67\xf5\xa0\xd7\x26\x0d\x46\x13\x90\x21\xab\xbb\x49\xd7\x4f\x08\x75\x53\xde\x56\xf7\x17\x6e\xe3\xb5\x90\xab\xaa\xea\xa7\x92\xc6\xca\x63\xe2\xee\x2a\xed\xaa\xf8\x58\xa3\x81\xc1\x37\x82\x8f\x98\xc3\xd6\x7b\x20\x05\x1a\xb2\x2f\x1f\x72\xdd\x92\xad\x5d\xa3\xd0\x70\x70\xa5\xc2\xd6\xfd\x68\x6b\x76\xb3\x6e\x59\x0b\x13\x18\x8c\x3f\xf4\xae\xe3\x99\x46\x9e\xec\xc0\x28\xfd\x78\x30\xfe\x81\x14\x83\x72\x3f\xba\x10\x82\xfd\x59\x6b\xc8\x1c\xcf\x71\xc2\xeb\x77\x2f\xb2\x42\x17\xc3\x4b\xf4\xf0\xe2\x6c\xf9\x2c\xc5\xbc\x7d\xff\xc4\xfc\x79\x38\x91\xd0\xd5\x84\xe6\xd1\x6c\xd9\x0e\x07\x66\x72\x7c\x50\x61\xfb\x7d\xf4\xf3\xee\x87\x3b\x88\xd4\x9f\x6e\x22\xa5\x13\xf4\xdf\x03\xfc\xc0\x30\x68\x1e\x2f\xd3\xf7\x90\xb7\xf5\x4c\x1b\x7d\x41\xee\x2e\x7c\x47\x47\x06\xb8\x85\xb8\xd0\x46\xe9\xe6\xaa\x42\x99\x18\xb8\x5f\xa3\x6c\x8e\x38\xca\x95\x5d\xb7\x9f\x37\x0e\x9a\x8f\x8c\x99\xb6\x01\x7b\x0e\x91\x11\x7c\x23\x7d\xed\xfd\x08\xe3\xbe\xb6\xb8\xaf\x2a\x68\x71\xe2\xdd\xd1\xba\x7f\xc7\x81\x29\xe2\x75\x33\x9a\x70\x0b\x85\x71\x5a\xee\x53\x0c\x07\x53\x2c\xf1\x7b\x81\xd2\x42\xcc\x33\xc7\x4b\x0e\xe0\x76\xb4\x51\x45\x96\xb4\x27\x4c\xe2\x83\x05\x37\xe2\xb4\xe8\x3e\x71\x0e\x9e\x2d\x51\xe0\xc3\x23\x6a\x72\x4c\x71\xee\xd1\xf9\xf7\xf8\xe9\xff\xea\x4c\x08\xba\x19\xdc\x45\xda\x88\xce\x2d\x6a\x6e\x95\xf6\xf1\x24\x98\xa2\x06\x12\x8a\x2e\x84\x89\xb9\x4e\x02\xaf\x14\x2d\x10\x37\x1e\xa9\xe8\x93\x13\x16\x29\xfc\xe4\xb6\x7e\xe3\x99\x48\xfc\x6b\xc0\x4f\x9d\x74\xbf\xd2\xe9\x5a\x16\xe9\xa3\xe3\xe5\xaf\xe8\x33\x68\x95\x0b\x0c\x96\x45\xfa\xc2\x43\xb6\x7d\xc4\xfa\x10\xae\xd3\x94\x46\xaf\xbf\xb8\x81\x65\x59\xa4\x8d\x77\x34\xfd\x89\xa7\xe3\xbb\x2c\xd2\xdb\x3d\x85\xd3\xbb\xfe\x2d\xe2\x47\x1d\x1a\x2a\x65\x33\x29\xec\xdb\x7e\x7d\x06\xd2\xbf\x2f\x3a\xd1\x56\xb2\xf1\x84\xe6\xf6\x54\xde\xb5\x2f\x88\x2e\xd0\xc1\x1b\xca\xa5\x78\x85\x0f\x36\x08\x3f\xc0\x10\xac\x0f\xc3\x2d\x67\xf3\x47\x61\xd9\x73\x77\x2c\x73\x9f\x69\x5f\xb3\x5e\xa2\x5f\xbb\x3d\x39\x3d\xa1\xc7\x1a\xf9\xfc\x84\xbb\xe1\x5b\xed\x25\x7c\xce\x7a\xec\xdf\x40\xd0\x4a\xbf\xa1\xab\xf7\xbf\x40\xed\x29\x1f\x2d\x2d\xb3\xee\x33\x54\xfb\xf7\x5f\x01\x00\x00\xff\xff\xc0\x6b\x02\xeb\x43\x16\x00\x00")

func templatesKvschemaGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesKvschemaGotmpl,
		"templates/kvschema.gotmpl",
	)
}

func templatesKvschemaGotmpl() (*asset, error) {
	bytes, err := templatesKvschemaGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/kvschema.gotmpl", size: 5699, mode: os.FileMode(420), modTime: time.Unix(1564963769, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/kvschema.gotmpl": templatesKvschemaGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"kvschema.gotmpl": &bintree{templatesKvschemaGotmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

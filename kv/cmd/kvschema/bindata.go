// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// templates/kvschema.gotmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesKvschemaGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x6d\x6f\xdb\x38\x12\xfe\x6c\xfe\x8a\x59\x7f\x58\x48\xa9\x2b\xa7\xc1\x01\xd7\x4b\x2f\x07\x64\x93\x5c\xcf\x68\x37\x29\xea\xb4\xc5\x22\x08\x0e\xb4\x34\xb2\x08\xcb\xa4\x96\xa4\x94\x18\x82\xfe\xfb\x61\x28\xca\x92\x13\x27\x41\xb0\x58\xe0\xf6\x4b\x1b\x8b\xc3\x79\x79\xe6\x99\x17\xa9\xae\xa7\x07\xc0\xce\x54\xb1\xd1\x62\x99\x59\x38\x3a\x7c\xf7\x0f\xf8\xa8\xd4\x32\x47\xf8\xfc\xf9\x8c\xb1\xcf\x22\x46\x69\x30\x81\x52\x26\xa8\xc1\x66\x08\xa7\x05\x8f\x33\x04\x7f\x32\x81\xef\xa8\x8d\x50\x12\x8e\xa2\x43\x08\x48\x60\xec\x8f\xc6\xe1\x07\xb6\x51\x25\xac\xf9\x06\xa4\xb2\x50\x1a\x04\x9b\x09\x03\xa9\xc8\x11\xf0\x3e\xc6\xc2\x82\x90\x10\xab\x75\x91\x0b\x2e\x63\x84\x3b\x61\x33\x67\xc4\xab\x88\xd8\x6f\x5e\x81\x5a\x58\x2e\x24\x70\x88\x55\xb1\x01\x95\x0e\xa5\x80\x5b\xc6\x00\x00\x32\x6b\x0b\x73\x3c\x9d\xde\xdd\xdd\x45\xdc\xb9\x19\x29\xbd\x9c\xe6\xad\x98\x99\x7e\x9e\x9d\x5d\x5c\xce\x2f\xde\x1e\x45\x87\x8c\x7d\x93\x39\x1a\x03\x1a\x7f\x2f\x85\xc6\x04\x16\x1b\xe0\x45\x91\x8b\x98\x2f\x72\x84\x9c\xdf\x81\xd2\xc0\x97\x1a\x31\x01\xab\xc8\xd1\x3b\x2d\xac\x90\xcb\x09\x18\x95\xda\x3b\xae\x91\x25\xc2\x58\x2d\x16\xa5\xdd\x41\xa8\x73\x4b\x18\x18\x0a\x28\x09\x5c\xc2\xf8\x74\x0e\xb3\xf9\x18\x7e\x39\x9d\xcf\xe6\x13\xf6\x63\x76\xfd\x9f\xab\x6f\xd7\xf0\xe3\xf4\xeb\xd7\xd3\xcb\xeb\xd9\xc5\x1c\xae\xbe\xc2\xd9\xd5\xe5\xf9\xec\x7a\x76\x75\x39\x87\xab\x7f\xc3\xe9\xe5\x6f\xf0\x69\x76\x79\x3e\x01\x14\x36\x43\x0d\x78\x5f\x68\xf2\x5d\x69\x10\x84\x1d\x26\x11\x9b\x23\xee\x18\x4f\x55\xeb\x8c\x29\x30\x16\xa9\x88\x21\xe7\x72\x59\xf2\x25\xc2\x52\x55\xa8\xa5\x90\x4b\x28\x50\xaf\x85\xa1\xec\x19\xe0\x32\x61\xb9\x58\x0b\xcb\xad\xfb\xfd\x28\x9c\x88\x1d\x4c\x9b\x86\xb1\xba\x4e\x30\x15\x12\x61\xbc\xaa\x4c\x9c\xe1\x9a\x47\x4b\x35\x6e\x9a\xe9\x14\xce\x54\x82\xb0\x44\x89\x9a\xdb\x16\xd1\xad\xcc\xf8\x03\x9c\x5f\xc1\xe5\xd5\x35\x5c\x9c\xcf\xae\x23\xc6\x0a\x1e\xaf\xc8\x9b\xba\x8e\xbe\xb4\x7f\x46\x97\x7c\x8d\x64\x41\xac\x0b\xa5\x2d\x04\x6c\x34\x5e\x0a\x9b\x95\x8b\x28\x56\xeb\xe9\xd2\xd1\x72\x2a\x95\xc5\xb7\x6b\x5e\x98\xe9\xaa\x1a\xb3\x90\xb1\xe9\x14\xe6\x56\x69\x84\x42\xab\x4a\x24\x68\x00\xa5\x15\x56\xa0\x99\x38\x6a\x29\x89\xd2\x9a\x09\x05\x08\x42\x26\x78\x8f\x06\x16\x3c\x5e\xf9\x94\xc3\x0a\x37\x6f\x2b\x9e\x97\x48\x9a\x0c\x69\x8a\xd8\x74\x4a\x3f\xbe\x19\xbe\xc4\x63\x36\x9d\xd6\xb5\x23\xa6\xbb\x0d\xd1\x59\xa7\xf4\x7a\x53\xa0\x81\xc3\xa6\x21\x61\xa0\x48\xe6\xdf\xb9\x6e\x9a\x09\xa0\xd6\x70\x7c\xd2\xfa\x55\xbb\x7f\x8f\x5b\xd5\x4d\x54\xd7\x3e\xce\xad\x9a\xe0\x30\x8c\xe6\x31\x97\xc1\xcd\xed\xaa\x8a\x2e\xc8\xf9\x4d\xfd\xf7\x09\xfc\xed\xa8\x09\x9d\x71\x94\x49\xd3\x30\xbb\x29\xd0\x47\x6a\xac\x2e\x63\x0b\x35\x1b\xad\xaa\xc8\x3d\x62\xa3\x82\x6b\x8a\x5a\x49\xd8\x2a\x61\x8d\x43\xe7\xcb\xf6\x44\xa3\x2d\xb5\x34\x2e\xab\xad\x08\xd8\x8c\x5b\x22\x6a\x49\x45\xce\x0d\x70\xe8\x15\x11\x85\x78\x9e\x83\x2a\x28\xa1\xc4\x8a\x88\xa5\xa5\x8c\x21\x30\xad\x23\x61\xaf\x3b\x08\x7b\xbb\xe4\x58\x6b\x0a\x4c\xb4\x55\xe7\xbd\xf9\x21\x6c\xf6\xd8\x23\x0e\x12\xef\x7c\x74\x0e\x6b\x24\x67\xc8\xcf\x57\xb9\xb3\xa3\x3c\xc0\xde\xa5\x10\x0e\x5a\xe5\x35\x1b\x0d\x7c\x82\x13\xc0\xad\xaf\x3f\x1b\xd6\xb0\xba\xd6\x5c\x2e\xf1\x61\x96\x9b\xa6\xae\x2d\xae\x8b\x9c\x5b\x84\xf1\x96\x56\x63\x88\xe8\xc4\x25\xa8\xcb\xd3\xa0\x40\x7a\xb9\x96\x23\x73\xb4\xdb\xf4\x83\x41\xdb\x46\xd8\x3f\xe2\xc6\xa8\x58\xb8\xda\xf1\x20\x58\x05\x55\x47\xc7\x33\xa5\x35\x9a\x42\xc9\x84\x6a\xb7\xa3\x32\xd7\x08\x65\x91\xd0\xa5\x1e\x8e\x03\x8f\xc7\xd0\xe0\x10\x8e\x09\x54\x50\xd7\x22\x85\xe8\x5c\x68\x8c\xed\x85\x8c\x55\x82\xda\x05\x91\x1b\x6c\x9a\x83\x6d\x50\xfe\x76\x48\x9c\x56\xda\x71\x0e\x37\x44\xee\x35\x5f\x61\xb0\xaa\xa2\x2f\x1a\x53\x71\x3f\x81\xf7\x6f\x8e\xde\xbc\x0f\x77\xe0\x8d\x5a\xbd\xa7\x36\x58\xe1\x26\x64\x23\xaa\x75\x27\xdd\xea\xdc\x39\xbe\x79\x7f\x7c\x1b\xb2\x11\xee\x3e\x7c\x77\xe8\x9e\xd6\x35\x90\xb3\x33\x1f\x73\xd3\x54\x5c\x83\xca\x93\x1e\x3b\x36\x12\x69\x57\x76\x26\xfa\x88\xee\xfa\x84\x64\xa2\x73\x24\x85\xe1\x07\x77\xfc\xd3\x09\x48\x91\x53\x18\x5d\xda\x51\x6b\x36\x7a\x70\x7f\xde\xdd\xaf\xbc\x3b\x41\xf8\xe2\xfd\x1c\x57\x74\x39\x47\xe9\xa3\xdd\xa2\x4d\x05\xbe\x2f\x2a\x02\xf2\x84\x86\x0e\xca\xa4\x35\xb7\xaa\xa2\x9d\xb6\xd0\x19\x8f\xa2\x28\x64\x23\x0a\x3a\x60\xa3\x51\x2e\x56\x30\x34\x34\x42\x03\x7d\x6e\xe7\x34\xee\xd8\x28\xac\x6b\xf0\x54\xee\x61\x63\x6c\x44\x7d\xcd\xd1\x65\xc0\x3b\xc7\xa5\xce\x1f\x72\xf0\x38\xc7\xd5\x6d\x74\xea\x3c\xeb\x1d\x7a\x90\xbe\x90\x8d\xa8\x24\xff\x3b\x01\x51\x51\xe4\xad\x35\x42\xbc\xae\xa3\x5f\xd1\x66\x2a\xf1\xcc\x0b\x1d\x5e\x0f\xc3\xbd\x39\xce\xc5\xea\x96\x6e\x3f\x88\x73\x7f\x2a\xd1\x3c\x99\xc9\x9d\x54\x50\x2e\x9c\x06\x13\x7d\xc5\xb5\xaa\x30\xc0\xd6\xfe\xfe\x0c\xa3\x79\x26\xc5\x0f\x34\x3b\xd5\x8d\xcb\xf6\x9e\xc8\xab\xff\x9b\xb8\x67\xd2\xa0\xb6\x7f\x4a\xdc\xfe\xb9\x14\x79\x5d\x03\xca\x04\xa8\x47\x00\x35\x0d\x68\x9a\x6d\xd3\xdf\x57\x3f\x5b\x79\x3f\x08\x3e\x0e\x9b\xe1\x70\x32\x3d\xd3\x0f\xbb\x56\x38\x4b\x41\xaa\x81\x60\xc6\x0d\x2c\x10\x25\x6d\x46\xb9\x88\x85\xcd\x37\xd4\x5f\xdd\xc8\xc0\x76\xf4\xef\x98\xbb\x13\x79\xee\x6d\x92\x3a\xb2\xaa\xd1\x94\xb9\xa5\xcd\x32\x21\xb4\xa9\xc5\xf2\x81\x85\x54\xab\x35\xad\x6f\xb8\x2e\xec\x06\x0c\xd5\x18\xc9\x2e\x36\x16\xcd\xe3\xbe\xfb\xf1\x89\xbe\x1b\x42\xb0\x7d\x3e\x69\x3b\xaa\xcb\x11\x55\x76\x35\x6c\x66\x95\x99\xec\x50\x61\x7b\xe4\xaa\x7b\x67\x53\x40\x2a\x44\x91\xba\x7e\x50\x99\x10\xfe\x75\x02\xef\x5c\x12\x2b\x38\x81\xca\xdc\x1c\xde\x0e\x13\x57\x39\xbd\x7b\x52\xe0\x14\x0f\xe6\xf1\x20\x74\x02\x91\xc7\x59\xbb\x57\x6d\x68\x13\xa6\x98\x5f\x9f\x09\x82\xcf\x8f\x1f\xca\xc8\x00\x75\xca\x07\x69\x5b\xe0\x8e\x65\xb7\x9c\x6c\x35\xba\xbc\x60\xf2\x07\x52\xd1\x82\x87\x06\x06\xf8\x85\x10\xdc\xdc\xee\x4d\x8a\xf7\xad\x1b\x75\x3b\x52\x04\x36\x9a\x30\xfc\x93\xa7\x21\xa1\x26\x26\x80\x7d\x93\x41\xe3\x72\xbb\x7f\x4c\x8e\x1e\x77\x8f\xe0\xe7\x36\x8c\x1b\x71\x1b\x76\x7d\xa4\xef\x34\x7b\x7a\x89\x14\xf9\xa4\x6f\x28\x3d\x71\x5a\x35\x13\x3a\x67\xcd\x76\x4b\xf2\xa3\xa5\x69\xf9\x74\xe1\x17\xef\x5f\xb9\x8d\x33\x21\x97\x75\xdd\x8f\xb3\x36\xc8\xc7\x15\xdf\x2d\xeb\x6d\x85\x3f\xbe\x01\x6e\x37\x37\x2d\x17\xbc\x2f\x1c\xd6\xde\x02\x5d\xa0\x05\xed\xe2\xbe\xd0\x5d\x95\xda\x0c\x85\x86\x07\xbd\x18\xd6\xee\x47\x47\xdb\xeb\xac\xe3\x3a\x26\x30\x98\x9b\xb4\x0a\xf3\x5c\x23\x4f\x36\x60\x94\xde\xbb\x54\xbd\x22\xca\xa0\xda\x75\x30\x84\x60\x77\x4e\x0f\xf9\xf6\x1c\x93\xde\x1c\xbd\xc8\xa5\xad\x0f\x2f\x91\xea\xc5\xbd\xe4\x59\x62\xbe\x7b\xff\xc4\xee\xf2\x70\x9a\x51\x4f\x43\xf3\x68\x2f\xe9\x06\x8b\x99\xec\x1f\x72\x6c\x97\x4a\xbf\x6c\x5e\x4d\x22\xba\xfe\x34\x8f\x94\x4e\xd0\xbf\xee\xfb\x61\x33\xe0\x8f\x97\xe9\x69\xe4\x75\x3d\xc3\xa4\xaf\xc8\xdd\xb0\x58\xe0\x52\x50\xe3\xb4\x10\x97\xda\x28\xdd\xf6\x38\x94\x89\x81\xbb\x0c\xa5\x33\x96\xa3\x5c\xda\xac\xfb\x7a\xf1\x80\x7f\xee\xf5\xb3\xe3\xa0\xfb\x34\x61\x33\x2e\x41\x46\xf0\x83\xee\x6b\x6f\x47\x18\xf7\x31\xc5\x7d\x34\x41\x8b\x13\x6f\xce\xbd\xc3\xb5\xaf\x01\x60\xca\x38\x6b\xc7\x1a\xb7\x50\x1a\x77\xcb\x7d\x69\xe1\x60\xca\x05\xfe\x5e\xa2\xb4\x10\xd3\xab\x94\x55\xe0\x00\xee\xc6\xa2\x2a\xf3\xa4\x2b\x32\x89\xf7\x16\xdc\x78\xec\xd0\x7d\xba\x14\x9e\xcd\x52\xe0\x3d\x3c\x58\x55\x6d\xbf\x38\xf3\x00\x49\x10\xd2\x86\xf0\xa0\x21\xb7\x83\xef\x2f\x5a\x16\xc2\xa2\xef\xc0\xad\xe8\xcc\xd2\xbb\xaa\xd2\xde\x9f\x04\x53\xd4\x40\x42\xd1\xb9\x30\x31\xd7\x49\xe0\x2f\x45\x73\xc4\x95\x47\x2a\xfa\xe4\x84\x45\x0a\x3f\xb9\xa3\xef\x3c\x17\x89\x5f\x26\xfd\xd2\x42\x8d\x99\x0a\x6c\x51\xa6\x8f\x2a\xcc\xf7\xf6\x13\xe8\x2e\x97\x18\x2c\xca\xf4\x85\xf7\xa0\xee\x1d\xc8\xbb\x70\x95\xa6\x34\xb6\xff\xe9\x26\xdd\xa2\x4c\x5b\xeb\x68\xfa\xa2\xa7\x0a\x5e\x94\xe9\xcd\xce\x85\xe3\xdb\x7e\x95\xf5\x33\x92\x16\x12\xd9\x8e\x98\x5d\xdd\x6f\x4e\x40\xfa\xf5\x74\x2b\xda\x49\xb6\x96\xd0\xdc\x1c\xcb\xdb\x6e\x01\xdd\x3a\x3a\x58\xc1\x5d\x88\x97\x78\x6f\x83\xf0\x03\x0c\xc1\xfa\x30\x3c\x72\x3a\x5f\x0b\xcb\x8e\xb9\x7d\x91\xfb\x48\xfb\x9c\xf5\x12\xfd\xb3\x9b\xc3\xe3\x43\xda\xf5\xc9\xe6\x27\xdc\x0c\x57\xfd\x97\xf0\x39\xe9\xb1\x7f\x0b\x41\x27\xfd\x16\x64\xf8\x47\x50\x7b\xca\x46\xd7\x99\xd9\xf6\x43\x46\xf7\xff\xff\x02\x00\x00\xff\xff\x47\xd7\xc1\xb5\x25\x16\x00\x00")

func templatesKvschemaGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesKvschemaGotmpl,
		"templates/kvschema.gotmpl",
	)
}

func templatesKvschemaGotmpl() (*asset, error) {
	bytes, err := templatesKvschemaGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/kvschema.gotmpl", size: 5669, mode: os.FileMode(420), modTime: time.Unix(1564449272, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/kvschema.gotmpl": templatesKvschemaGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"kvschema.gotmpl": &bintree{templatesKvschemaGotmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

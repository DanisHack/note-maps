// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// templates/kvschema.gotmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesKvschemaGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\xdf\x6f\xdb\xba\x15\x7e\x36\xff\x8a\x73\xfd\x70\x21\x65\xaa\xdc\x15\x03\x86\xa5\xcb\x80\x34\xc9\xee\x8c\xdb\x25\x17\x75\xda\xe2\x22\x08\x06\x5a\x3a\xb6\x09\xc9\xa4\x4a\x52\x4e\x04\x41\xff\xfb\x70\x48\x4a\xb2\x1d\x67\xdd\xc5\x30\xe0\xf6\xa5\x91\x49\x7e\xe7\x3b\xbf\x3e\x1e\xb6\xed\xec\x0c\xd8\x95\xaa\x1a\x2d\xd6\x1b\x0b\xef\xde\xfe\xf1\x2f\xf0\x93\x52\xeb\x12\xe1\xe3\xc7\x2b\xc6\x3e\x8a\x0c\xa5\xc1\x1c\x6a\x99\xa3\x06\xbb\x41\xb8\xac\x78\xb6\x41\x08\x2b\x09\x7c\x41\x6d\x84\x92\xf0\x2e\x7d\x0b\x11\x6d\x98\x86\xa5\x69\xfc\x9e\x35\xaa\x86\x2d\x6f\x40\x2a\x0b\xb5\x41\xb0\x1b\x61\x60\x25\x4a\x04\x7c\xce\xb0\xb2\x20\x24\x64\x6a\x5b\x95\x82\xcb\x0c\xe1\x49\xd8\x8d\x33\x12\x20\x52\xf6\x6b\x00\x50\x4b\xcb\x85\x04\x0e\x99\xaa\x1a\x50\xab\xfd\x5d\xc0\x2d\x63\x00\x00\x1b\x6b\x2b\x73\x3e\x9b\x3d\x3d\x3d\xa5\xdc\xd1\x4c\x95\x5e\xcf\x4a\xbf\xcd\xcc\x3e\xce\xaf\x6e\x6e\x17\x37\x6f\xde\xa5\x6f\x19\xfb\x2c\x4b\x34\x06\x34\x7e\xab\x85\xc6\x1c\x96\x0d\xf0\xaa\x2a\x45\xc6\x97\x25\x42\xc9\x9f\x40\x69\xe0\x6b\x8d\x98\x83\x55\x44\xf4\x49\x0b\x2b\xe4\x3a\x01\xa3\x56\xf6\x89\x6b\x64\xb9\x30\x56\x8b\x65\x6d\x0f\x22\xd4\xd3\x12\x06\xf6\x37\x28\x09\x5c\xc2\xf4\x72\x01\xf3\xc5\x14\x3e\x5c\x2e\xe6\x8b\x84\x7d\x9d\xdf\xff\xe3\xee\xf3\x3d\x7c\xbd\xfc\xf4\xe9\xf2\xf6\x7e\x7e\xb3\x80\xbb\x4f\x70\x75\x77\x7b\x3d\xbf\x9f\xdf\xdd\x2e\xe0\xee\xef\x70\x79\xfb\x2b\xfc\x3c\xbf\xbd\x4e\x00\x85\xdd\xa0\x06\x7c\xae\x34\x71\x57\x1a\x04\xc5\x0e\xf3\x94\x2d\x10\x0f\x8c\xaf\x94\x27\x63\x2a\xcc\xc4\x4a\x64\x50\x72\xb9\xae\xf9\x1a\x61\xad\x76\xa8\xa5\x90\x6b\xa8\x50\x6f\x85\xa1\xec\x19\xe0\x32\x67\xa5\xd8\x0a\xcb\xad\xfb\x7e\xe1\x4e\xca\xce\x66\x5d\xc7\x58\xdb\xe6\xb8\x12\x12\x61\x5a\xec\x4c\xb6\xc1\x2d\x4f\xd7\x6a\xda\x75\xb3\x19\x5c\xa9\x1c\x61\x8d\x12\x35\xb7\x3e\xa2\xc3\x9e\xe9\x7b\xb8\xbe\x83\xdb\xbb\x7b\xb8\xb9\x9e\xdf\xa7\x8c\x55\x3c\x2b\x88\x4d\xdb\xa6\xbf\xf8\x3f\xd3\x5b\xbe\x45\xb2\x20\xb6\x95\xd2\x16\x22\x36\x99\xae\x85\xdd\xd4\xcb\x34\x53\xdb\xd9\xda\x95\xe5\x4c\x2a\x8b\x6f\xb6\xbc\x32\xb3\x62\x37\x65\x31\x63\xb3\x19\x2c\x9c\x09\xa8\xb4\xda\x89\x1c\x0d\xa0\xb4\xc2\x0a\x34\x89\xab\x2d\x25\x51\x5a\x93\x90\x87\x20\x64\x8e\xcf\x68\x60\xc9\xb3\x22\xe4\x1c\x0a\x6c\xde\xec\x78\x59\x23\x41\x19\xab\x34\xa6\x6c\x36\xa3\x8f\xcf\x86\xaf\xf1\x9c\xcd\x66\x6d\xeb\x2a\xd3\x9d\x86\xf4\xaa\x07\xbd\x6f\x2a\x34\xf0\xb6\xeb\x68\x33\x90\x2b\x8b\x2f\x5c\x77\x5d\x02\xa8\x35\x9c\x5f\x04\x62\xed\x82\x40\xcf\x3d\x76\x97\xb6\x6d\xf0\x74\xc0\x89\xde\xc6\xe9\x22\xe3\x32\x7a\x78\x2c\x76\xe9\x0d\xb1\x6f\xda\x3f\x27\xf0\xa7\x77\x5d\xec\xac\xa3\xcc\xbb\x8e\xd9\xa6\xc2\xde\x57\x63\x75\x9d\x59\x68\xd9\xc4\x81\x43\xb1\x4b\xdd\x1f\xcc\x65\x48\x73\xb9\xc6\x63\xa2\x5d\xd7\xb6\x16\xb7\x55\xc9\x2d\xc2\x74\x88\xcc\x14\x52\x5a\xf1\x26\xfa\xff\xf7\xb2\xec\x9c\xf6\xf9\x1d\x98\xcf\x5d\x20\xb6\x5c\xf2\x35\x1a\xe0\xb0\xe5\x15\xac\xb4\xda\x8e\x3b\xc0\x45\xd4\x50\xe7\xf4\xd9\x48\xbd\x03\x47\x20\xa3\x23\x06\xdc\xbf\xc1\x93\x49\xa5\x71\x25\x9e\xe9\x87\x5f\xdc\x5f\xec\x24\xbf\xd1\x91\x43\x8e\x83\xf3\xa7\x78\xf6\x9c\x88\xdf\x31\xe7\x63\x9e\x23\xd0\x6f\xe3\xca\x4e\xb3\xd1\x68\x6b\x4d\x0d\x77\x72\x51\x29\xea\x1c\x6e\x5d\xe7\xad\xc5\x0e\x25\x54\x5c\xa3\xb4\x29\x5b\xd5\x32\x83\xc8\xc0\x99\x2f\x81\xf8\xc4\xf9\xc8\xef\x85\xa1\x8a\x62\x38\x3b\x61\xa5\x65\x93\x1d\xd7\xf0\x82\xf3\xc4\x73\x83\x1f\x5f\x9e\x69\xd9\x64\x62\xce\xbd\xd7\xc6\x3b\x9d\xb0\x49\x70\xfb\x3c\x40\xa5\x57\x4a\x66\xdc\x7a\xd3\xc7\xa4\x12\xd7\xea\x6e\x9f\xc7\x8e\x13\x36\xe9\x42\x9c\x16\x68\xc1\xa0\x35\xce\xed\x31\x21\xdc\x18\x95\x09\x27\x26\xae\x01\x91\xf2\xb5\xeb\xdb\xf3\x4a\x69\x8d\xa6\x52\x32\x27\x31\xeb\x5b\x9b\x6b\x84\xba\xca\xe9\x50\x1f\xb3\xec\x54\x14\x62\x32\x1a\xe1\x18\xab\x04\x76\xd0\xb6\x62\x05\xe9\xb5\xd0\x98\xd9\x1b\x99\xa9\x1c\xb5\x6b\x8e\xd2\x60\xd7\x9d\x85\xea\x1b\xb0\x62\xea\x73\xa5\x29\x9e\x58\x50\xbf\x67\xe9\x89\x40\x44\x18\xb3\x49\xdb\x02\x21\xcf\x03\xc9\xae\xa3\x04\xa8\x32\x1f\x9d\x65\x13\xb1\xea\x75\x23\x4b\x4d\xfa\x13\xb1\x2b\x12\xda\x94\x5e\x23\x51\x89\xdf\xbb\xf5\x1f\x2e\x40\x8a\x92\x8c\xf6\xf9\x42\xad\x29\x94\x47\x00\x8b\x00\x40\xfe\xd1\xf1\x28\xfe\x2e\x00\x91\x8a\xd8\x64\x52\x62\x01\x17\x50\xa2\x8c\xb0\x88\xd9\x64\x22\x0a\x80\x57\xbc\xdb\x13\xb1\x84\x62\xb9\x2f\x6a\x74\xb4\x14\x3d\x94\x70\x50\x68\x60\x0c\xf9\x82\xae\x66\x36\x89\xdb\x16\x82\x64\x8d\x01\x62\x6c\x42\x12\xec\x32\xb9\x57\x12\x2e\xcd\x6c\xe2\x50\x45\xf1\x70\x5e\x62\xf1\x98\x5e\x56\x15\xca\x7c\x34\x7d\x5c\x69\x6c\x42\xd7\xe1\xbf\x12\x10\x3b\x8a\x8e\xb7\x45\x81\x6d\xdb\xf4\x9f\x68\x37\x2a\xf7\x1b\xa3\xd8\x45\xc5\x81\x73\x87\x19\x39\x1b\xa2\x78\xa4\xb3\x43\x20\xd3\x34\x75\x61\x79\x91\x30\x51\x24\x80\xe6\xd5\x7c\x1d\xc4\x9b\x02\xee\x20\x4c\xfa\x09\xb7\x6a\x87\x11\x7a\xf3\x27\xf2\x18\x70\x5f\x4f\xe4\x11\xb4\xc3\xee\x5c\x4e\x4f\x78\xbe\xfb\xbd\xf8\x3d\x97\x06\xb5\xfd\xff\xf8\x1d\x7e\x97\xa2\x6c\x5b\x40\x99\x03\x35\x2e\x50\x27\x43\xd7\x85\xc5\x57\xda\x64\x38\xd0\xab\x53\xc6\xe5\x29\xdd\x76\x43\x16\xf2\x6c\xe3\xef\x93\x86\x86\x44\xba\x3f\xbc\x3c\xcd\xfd\x90\xea\x06\xa9\xb2\x21\x89\xa2\x01\x80\x66\x9e\x01\x4a\x02\x6e\x2b\xdb\xf8\x8b\xc7\x4b\x9c\x54\x41\x54\x08\xbb\xc0\x86\x24\x91\x5b\xc2\xcb\x95\x1b\xa3\xf1\x59\x18\xeb\xa7\x99\x81\x48\x08\x7c\x14\x03\x31\xcd\xdd\xc7\x88\xbe\x6c\x2c\x82\xa1\x56\x4b\x88\x91\x04\x4e\x70\xdf\x6a\xd4\x8d\xf7\x60\xb8\x0c\x37\xdc\x3a\xfd\x24\x3b\xc7\xda\xbb\xef\xb7\xd9\xa8\xba\xcc\xa1\x0f\xb1\x22\x3c\xc7\xda\x7c\x4f\x72\x69\xca\x41\x03\x7b\x83\x4e\x0c\xd1\xc3\xe3\xb0\x37\xf1\x38\xae\x20\x34\x9a\xba\xb4\x54\x0e\x5b\x5e\xe0\xe1\x2e\xa7\x4d\x26\x0e\x9d\x2d\x12\xc0\xb1\xbc\xd1\xb8\xd2\x38\x2a\xd1\xd7\xb4\x39\x81\xe8\x47\x6f\xe9\x41\x3c\xc6\x7d\x09\x8f\x55\x7e\xa2\x8c\xa5\x28\x93\xb1\x96\xc7\x5a\xf3\x30\x09\xad\x1f\xcc\x61\x41\xd4\xdc\x7c\xf2\x51\xa9\xa2\xae\x3e\x34\x63\x30\xfb\x6a\x18\xd2\xe0\xc2\xdd\xb6\xa3\x94\x86\x0b\x62\x36\x1b\xa6\x2a\x4a\x54\x30\x4a\x53\x8d\xcd\x36\x54\x5f\x6d\x9b\xd2\xa4\x77\xf3\x5c\x69\x2a\x4e\x1a\x74\xec\x06\x85\x86\xa3\x76\x87\xad\xfb\xe8\x0b\xf5\x7e\xd3\x97\x24\xe6\xb0\x27\xcc\xf4\x80\xe1\xa5\x46\x9e\x37\x60\x94\x7e\x71\xa1\x1e\xf1\xdb\x4b\xf3\x0b\x27\xa3\xdd\x21\xb9\x18\xa2\xc3\x4b\x60\x3f\xef\x05\x36\xaf\x5e\xa6\x83\x91\x0f\x8d\x45\x43\x77\xce\x91\xd6\x1f\x34\xb2\xbf\xd1\xd0\xbc\xb8\x71\x7a\xd1\xa0\x27\x42\xa8\x8f\x02\x9b\x7d\x0d\xa3\x04\x1e\xcd\x81\xb5\x36\x4a\xef\x0d\x81\x5f\x5c\xd7\xfa\x21\x50\x0b\xb9\x66\x93\xbb\xd5\xca\x20\x3d\x6a\x6d\x50\x8e\xcb\xb2\x3c\x4c\x35\xcf\xf7\x12\x7d\xdc\x62\x2f\x63\x1a\x12\x4e\x50\x4a\xe7\x18\xde\xa9\x63\xdf\x87\x0c\x7e\x42\xee\x66\xa0\x25\xae\x05\xe9\x8a\x85\xcc\x91\xf5\x32\x81\x32\x37\xf0\x44\x8d\x4f\x7a\x54\xa2\x5c\xdb\x4d\xff\x84\x3e\xca\xbb\x7b\x02\xf5\xb9\x77\xef\x63\xbb\xe1\x12\x64\x0a\x5f\xe9\xbc\x0e\x76\x84\x71\x12\xe1\x5e\xee\x68\x31\x09\xe6\xe8\xf7\x30\x7a\x81\xa9\xb3\x0d\xa1\xb9\x52\xad\x8d\x3b\xe5\x9e\xfb\x1c\x4c\xbd\xc4\x6f\x35\x0d\xa2\x19\x2f\x4b\x1a\xe9\xf6\x63\xf4\x74\x20\x2d\xf8\x6c\x41\x3a\x79\x19\x5e\x11\xff\x5d\x09\xee\x17\x5f\x60\x77\x76\x94\xca\x04\x24\xa5\x2a\x86\x23\x45\xf2\xcf\xb7\xb1\x1e\x85\xc5\x41\x49\x7c\xa9\xcd\x2d\x3d\x71\x95\x3e\x2d\x2a\x07\x23\xd1\xf1\x28\x12\xb3\x49\x8e\x2b\xd4\x40\xa8\xe9\xb5\x30\x19\xd7\x79\x14\x7b\x2b\xe9\x02\xb1\x08\x74\x53\x57\x5e\xfb\xb5\x2c\x56\xf0\x83\xdb\xf5\x85\x97\x22\x0f\x77\xb6\x0f\xd4\x30\xbd\x2d\xeb\xd5\x8b\x62\x0f\x42\x76\x01\xfd\xe1\x1a\xa3\x65\xbd\xfa\xce\x54\xd9\x4f\x94\x81\x4d\x28\xed\xbf\x3a\xe5\x5d\xd6\x2b\x6f\x1d\xcd\x38\x31\x50\x33\x2d\xeb\xd5\xc3\xc1\x81\xf3\xc7\x71\x66\x08\x9a\x0d\x7f\xbb\x00\xe9\xf5\xf4\x10\xfb\x0f\x17\x20\xc3\x18\x30\x6c\xed\x77\x7a\x4b\x68\x1e\xce\xe5\x63\x7f\xcf\x0f\x44\xf7\x26\x1d\xe7\xe2\x2d\x3e\xdb\x28\x7e\x0f\xfb\xc1\x7a\xbf\xbf\xe4\xa7\x9d\xdf\x18\x96\x03\x73\xa7\x3c\xff\x4f\x9e\x7a\x4b\x07\x99\x0d\x77\xb6\xb3\xfe\x33\x36\x2e\xc5\xc7\x21\xb9\x18\xc3\xfd\x06\xa2\x1e\xf6\x0d\xc8\xf8\x7f\x09\x54\xf8\xec\x86\xf7\x8c\x7f\x54\xff\x3b\x00\x00\xff\xff\x01\x5a\x34\xee\x0e\x14\x00\x00")

func templatesKvschemaGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesKvschemaGotmpl,
		"templates/kvschema.gotmpl",
	)
}

func templatesKvschemaGotmpl() (*asset, error) {
	bytes, err := templatesKvschemaGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/kvschema.gotmpl", size: 5134, mode: os.FileMode(420), modTime: time.Unix(1563666225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/kvschema.gotmpl": templatesKvschemaGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"kvschema.gotmpl": &bintree{templatesKvschemaGotmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// templates/kvschema.gotmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesKvschemaGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x6f\x6f\xdb\xc8\xd1\x7f\xad\xfd\x14\x73\x7a\x71\x20\x1d\x99\x74\x8c\x07\x78\x52\xb9\x2e\xe0\xb3\xdd\x54\x48\xce\x0e\x2c\x27\xc1\xc1\x30\x8a\x15\x39\x92\x16\xa2\x76\x99\xdd\xa5\x6c\x82\xe0\x77\x2f\x66\xb9\x24\x25\x59\x71\x1a\x14\x07\xb4\x6f\x12\x8b\x9c\xff\xf3\x9b\xdf\x0c\xab\x2a\x3e\x02\x76\xa9\xf2\x52\x8b\xc5\xd2\xc2\xe9\xc9\xdb\xbf\xc0\x7b\xa5\x16\x19\xc2\xc7\x8f\x97\x8c\x7d\x14\x09\x4a\x83\x29\x14\x32\x45\x0d\x76\x89\x70\x91\xf3\x64\x89\xe0\xdf\x8c\xe0\x0b\x6a\x23\x94\x84\xd3\xe8\x04\x02\x12\x18\xfa\x57\xc3\xf0\x8c\x95\xaa\x80\x35\x2f\x41\x2a\x0b\x85\x41\xb0\x4b\x61\x60\x2e\x32\x04\x7c\x4e\x30\xb7\x20\x24\x24\x6a\x9d\x67\x82\xcb\x04\xe1\x49\xd8\xa5\x73\xe2\x4d\x44\xec\x0f\x6f\x40\xcd\x2c\x17\x12\x38\x24\x2a\x2f\x41\xcd\xb7\xa5\x80\x5b\xc6\x00\x00\x96\xd6\xe6\x66\x1c\xc7\x4f\x4f\x4f\x11\x77\x61\x46\x4a\x2f\xe2\xac\x11\x33\xf1\xc7\xc9\xe5\xf5\xcd\xf4\xfa\xf8\x34\x3a\x61\xec\xb3\xcc\xd0\x18\xd0\xf8\xad\x10\x1a\x53\x98\x95\xc0\xf3\x3c\x13\x09\x9f\x65\x08\x19\x7f\x02\xa5\x81\x2f\x34\x62\x0a\x56\x51\xa0\x4f\x5a\x58\x21\x17\x23\x30\x6a\x6e\x9f\xb8\x46\x96\x0a\x63\xb5\x98\x15\x76\xa7\x42\x6d\x58\xc2\xc0\xb6\x80\x92\xc0\x25\x0c\x2f\xa6\x30\x99\x0e\xe1\xb7\x8b\xe9\x64\x3a\x62\x5f\x27\xf7\xff\xb8\xfd\x7c\x0f\x5f\x2f\xee\xee\x2e\x6e\xee\x27\xd7\x53\xb8\xbd\x83\xcb\xdb\x9b\xab\xc9\xfd\xe4\xf6\x66\x0a\xb7\x7f\x87\x8b\x9b\x3f\xe0\xc3\xe4\xe6\x6a\x04\x28\xec\x12\x35\xe0\x73\xae\x29\x76\xa5\x41\x50\xed\x30\x8d\xd8\x14\x71\xc7\xf9\x5c\x35\xc1\x98\x1c\x13\x31\x17\x09\x64\x5c\x2e\x0a\xbe\x40\x58\xa8\x0d\x6a\x29\xe4\x02\x72\xd4\x6b\x61\xa8\x7b\x06\xb8\x4c\x59\x26\xd6\xc2\x72\xeb\x7e\xbf\x48\x27\x62\x47\x71\x5d\x33\x56\x55\x29\xce\x85\x44\x18\xae\x36\x26\x59\xe2\x9a\x47\x0b\x35\xac\xeb\x38\x86\x4b\x95\x22\x2c\x50\xa2\xe6\xb6\xa9\x68\x27\x33\x3c\x83\xab\x5b\xb8\xb9\xbd\x87\xeb\xab\xc9\x7d\xc4\x58\xce\x93\x15\x45\x53\x55\xd1\xa7\xe6\xcf\xe8\x86\xaf\x91\x3c\x88\x75\xae\xb4\x85\x80\x0d\x86\x0b\x61\x97\xc5\x2c\x4a\xd4\x3a\x5e\x38\x58\xc6\x52\x59\x3c\x5e\xf3\xdc\xc4\xab\xcd\x90\x85\x8c\xc5\x31\x4c\xad\xd2\x08\xb9\x56\x1b\x91\xa2\x01\x94\x56\x58\x81\x66\xe4\xa0\xa5\x24\x4a\x6b\x46\x94\x20\x08\x99\xe2\x33\x1a\x98\xf1\x64\xe5\x5b\x0e\x2b\x2c\x8f\x37\x3c\x2b\x90\x2c\x19\xb2\x14\xb1\x38\xa6\x1f\x9f\x0d\x5f\xe0\x98\xc5\x71\x55\x39\x60\x3a\x6d\x88\x2e\x5b\xa3\xf7\x65\x8e\x06\x4e\xea\x9a\x84\x81\x32\x99\x7e\xe1\xba\xae\x47\x80\x5a\xc3\xf8\xbc\x89\xab\x72\xff\x8e\x1b\xd3\x75\x54\x55\x3e\xcf\xce\x4c\x70\x12\x46\xd3\x84\xcb\xe0\xe1\x71\xb5\x89\xae\x29\xf8\xb2\xfa\xff\x11\xfc\xdf\x69\x1d\x3a\xe7\x28\xd3\xba\x66\xb6\xcc\xd1\x67\x6a\xac\x2e\x12\x0b\x15\x1b\xac\x36\x91\x7b\xc4\x06\x39\xd7\x28\x2d\x74\x16\x58\xcd\xd8\xbc\x90\x09\x04\xa6\xd1\x0a\xe1\x93\x13\x09\xb0\x17\x0a\xe1\xa8\xb1\x58\xb1\x81\x89\xbc\x89\x73\x40\x36\xd0\x68\x0b\x2d\xe1\x57\xc3\x6a\x56\x55\x9a\xcb\x05\xee\x67\x5e\xd7\x55\x65\x71\x9d\x67\xdc\x22\x0c\xbb\x52\x0f\x21\xa2\x37\x2e\xe8\x36\xf6\x2d\xd0\xf4\x72\x4d\xdd\xa6\x68\xbb\x92\x80\x41\x6b\x1c\xe6\xfa\x47\xdc\x18\x95\x08\x87\x27\xd7\x04\xa4\x61\xdc\xb4\x2d\xba\x54\x5a\xa3\xc9\x95\x4c\x09\xcf\x6d\x7b\xb9\x46\x28\xf2\x94\x94\xa2\xae\x08\x47\xbe\x0a\xdb\x0e\xb7\x6b\x31\x82\x0d\x54\x95\x98\x43\x74\x25\x34\x26\xf6\x5a\x26\x2a\x45\xed\x92\xc8\x0c\xd6\xf5\x51\x97\x94\xd7\x0e\xa9\xcf\x4a\xbb\x3e\x60\x49\x0d\x5f\xf3\x15\x06\xab\x4d\xf4\x49\xe3\x5c\x3c\x8f\xe0\xdd\x9b\xd3\x37\xef\xc2\xbe\xb6\x51\x63\xf4\xc2\x06\x2b\x2c\x43\x36\x20\xf0\x3b\xd1\xc6\xe0\xce\xeb\x87\x77\xe3\xc7\x90\x0d\x70\xf7\xe1\xdb\x13\xf7\xb4\xaa\x80\x22\x9d\xf8\x84\xeb\x7a\xc3\x35\xa8\x2c\xed\x0b\xc7\x06\x62\xde\xe2\xd0\x44\xef\xd1\xa9\x8f\x48\x26\xba\x42\x32\x18\x9e\xb9\xd7\xbf\x9c\x83\x14\x19\xe5\xd0\xf6\x1c\xb5\x66\x83\x3d\xfd\x69\xab\xbf\xf1\xe1\x04\xe1\x0f\xf5\x33\x5c\x91\x72\x86\xd2\x67\xdb\x95\x9a\x10\x7f\x28\x2b\xaa\xe2\x39\xb1\x30\xca\xb4\x71\xb7\xda\x44\x3b\x73\xd2\x3a\x8f\xa2\x28\x64\x03\x4a\x3a\x60\x83\x41\x26\x56\xb0\xed\x68\x80\x06\xfa\xc6\x4e\x89\xff\xd9\x20\xac\x2a\xf0\x38\xee\xcb\xc6\xd8\x80\x06\xdd\x61\x65\x0b\x74\x0e\x48\x6d\x3c\x14\xe0\x38\xc3\xd5\x63\x74\xe1\x22\xeb\x03\xda\x6b\x5f\xc8\x06\xc4\xba\xff\x1c\x81\xd8\x50\xe6\x8d\x37\xaa\x78\x55\x45\xbf\xa3\x5d\xaa\xd4\xc3\x2e\x74\xf5\xda\x4f\xf7\x61\x9c\x89\xd5\x23\x69\xef\xe5\x79\xb8\x95\x68\xbe\xdb\xc9\x9d\x56\x50\x2f\x9c\x05\x13\xdd\xe1\x5a\x6d\x30\xc0\xc6\xff\xe1\x0e\xa3\x79\xa5\xc5\x7b\x96\x9d\xe9\xda\x75\xfb\x40\xe6\x9b\xff\x9a\xbc\x27\xd2\xa0\xb6\x7f\x4a\xde\xfe\xb9\x14\x59\x55\x01\xca\x14\x88\x20\x80\x18\x03\xea\xda\xbf\x3c\x3c\x3f\x9d\x3c\x51\x75\x1c\xc3\xfb\x2d\x62\x72\x98\x85\x46\xdd\x00\xdf\x82\x26\xd5\x19\x79\xb2\x6c\xb6\x5c\x49\x77\x09\x9a\x96\x0e\x27\xcd\x5d\xe4\x76\x77\x56\x12\x25\xd2\xd6\xa1\x35\xdb\x99\x92\x80\xeb\xdc\x96\xe0\x56\x5e\x43\xa9\x52\x79\x22\x23\xdb\x2b\x2c\x89\x82\xb9\x25\x7b\xa9\x72\x97\x1b\x3e\x0b\x63\x9b\x0d\xda\x05\xe2\x7b\x10\x84\x90\x70\x09\xa9\xfb\xd1\x5b\x9f\x95\x16\xc1\x50\x12\x23\x8a\x48\x02\x27\x73\xdf\x0a\xd4\x65\x93\x81\x5f\xd1\xce\x93\xe3\x6b\xf2\xb3\xcf\xf5\xdb\x79\x9b\xa5\x2a\xb2\x14\xda\x72\x2b\xb2\xe7\xa2\x36\x2f\x29\xfe\x45\x25\x03\x34\xb0\xb5\x5d\x43\x08\x1e\x1e\x3b\x89\x51\x63\xc7\x61\x43\xa3\x29\x32\xdb\x51\xf9\x8e\x14\xf1\x0b\x9a\x30\xfc\x33\xd9\x9e\x6a\x23\x46\x80\xfd\x10\xa1\x71\x00\x3c\xbc\x06\x06\x2f\xa7\x23\xf8\xb5\xc9\xe1\x41\x3c\x86\xed\x9c\xf4\x93\x74\x60\x56\xa4\xc8\x46\xfd\xc0\xf4\x88\x6e\xcc\x8c\xe8\x3d\xab\xbb\x13\xc0\x53\x67\xdd\x40\xf6\xda\xb7\xf1\x77\x6e\x93\xa5\x90\x8b\xaa\xea\xe9\xba\x49\xb2\x6f\x60\x8b\xc0\xae\xf5\xae\xc5\x2f\x35\x1a\x64\x7a\x64\xf8\x58\x38\xac\xbd\x07\x52\xa0\xeb\xe3\xfa\x39\xd7\x34\x0d\x5a\xad\x09\x60\x42\xc3\x1e\xd7\xc0\xda\xfd\x68\x27\xe3\x7e\xd9\xce\x00\xa6\xb0\xb5\x17\xe8\x48\xe7\x99\x46\x9e\x96\x60\x94\x3e\x78\x31\xfc\x44\x96\xc1\x66\x37\xc0\x10\x82\xdd\x3d\xb4\x0d\xb6\xd7\x60\xf4\xe6\xf4\x75\x20\x75\x01\xfc\x08\x51\x3f\x5c\xba\xaf\xa2\xf2\xed\xbb\xef\x2c\xe6\x7d\xaa\xa6\x55\x8c\xe6\xc5\xd2\x6d\x59\xd3\x8c\x0e\x33\x38\xdb\xc5\xd1\x6f\xe5\x4f\x23\x88\xd4\xbf\x0f\x22\xa5\x53\xf4\x1f\x77\xfe\xac\xdc\x02\x8f\x97\xe9\x31\xe4\x6d\xbd\x02\xa3\x3b\xe4\xee\xd2\x9c\xe1\x42\x10\x9b\x5a\x48\x0a\x6d\x94\x6e\xc8\x11\x65\x6a\xe0\x89\xe8\x8e\x9c\x65\x28\x17\x76\xd9\x7e\xab\xee\x81\xcf\x7d\x6c\xb4\x00\x74\x1f\xa2\x76\xc9\x25\xc8\x08\xbe\x92\xbe\xf6\x7e\x84\x71\xc4\xe8\x3e\x91\xd1\xe2\xc8\xbb\xa3\xe7\xfe\xc0\x05\x53\x24\xae\x08\x6e\x5e\x0a\xe3\xb4\xdc\x77\x35\x07\x53\xcc\xf0\x5b\x41\x37\x7d\xc2\xb3\x8c\x0e\x67\x57\x60\x9f\xd9\xd3\x0e\xa1\xe2\xb3\x05\xe9\x48\xd5\x57\xf7\xfb\x73\xf0\x6a\x97\x02\x1f\xe1\xd1\x6a\xd3\x90\xc5\xa5\x2f\x90\x04\x21\x6d\x08\x7b\x54\xdc\x7c\x2b\xfd\x2f\xce\x84\xb0\xe8\xb9\xb7\x11\x9d\x58\xfa\xec\x55\xda\xc7\x93\xe2\x1c\x35\x90\x50\x74\x25\x4c\xc2\x75\x1a\x78\xa5\x68\x8a\xb8\xf2\x65\x8a\x3e\x38\x61\x31\x87\x5f\xdc\xab\x2f\x3c\x13\xa9\x3f\x93\x9a\xce\x38\x4a\xa6\xe9\x9a\x15\xf3\x17\xe3\xe5\x59\xfd\x1c\x5a\xe5\x02\x83\x59\x31\xff\xc1\x85\xdf\x5e\xf7\x3e\x84\xdb\xf9\xdc\xa0\x85\xbf\xba\x05\x37\x2b\xe6\x8d\x77\x34\xfd\xc4\xd3\xf8\xce\x8a\xf9\xc3\x8e\xc2\xf8\xb1\x3f\xd2\xfc\x6a\x84\xbf\x9d\x83\x6c\x96\xcb\xae\xed\x37\xe7\x20\xfd\xe1\xd5\x89\xb6\x92\x8d\x27\x34\x0f\x63\xf9\xd8\x9e\x56\x5d\xa0\x5b\xc7\xa5\x4b\xf1\x06\x9f\x6d\x10\x9e\xc1\x76\xb1\xce\xb6\x5f\x39\x9b\x3f\x5b\x96\x1d\x77\x87\x32\xff\x37\x32\xfd\xb0\x4d\x91\xfd\xb3\x87\x31\x1d\xb6\x14\xc6\x07\x2c\xbb\xbb\x76\xaf\x3c\xe7\x7d\xe9\x8f\x21\x68\x5d\x1c\x83\x0c\xff\x93\xa2\xf9\x9f\xdd\x47\x78\xfb\xff\xbf\x02\x00\x00\xff\xff\xc1\x71\x62\x23\xf5\x13\x00\x00")

func templatesKvschemaGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesKvschemaGotmpl,
		"templates/kvschema.gotmpl",
	)
}

func templatesKvschemaGotmpl() (*asset, error) {
	bytes, err := templatesKvschemaGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/kvschema.gotmpl", size: 5109, mode: os.FileMode(420), modTime: time.Unix(1564022690, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/kvschema.gotmpl": templatesKvschemaGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"kvschema.gotmpl": &bintree{templatesKvschemaGotmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

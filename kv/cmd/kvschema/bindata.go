// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// templates/kvschema.gotmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesKvschemaGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x5f\x6f\xdb\x38\x12\x7f\x36\x3f\xc5\xac\x1f\x16\x52\xea\xca\xd9\xe0\x80\xeb\xa5\x97\x03\xb2\x49\xae\x67\xb4\x9b\x14\x71\xda\x62\x11\x04\x07\x5a\x1a\xdb\x84\x65\x52\x25\x29\x27\x82\xa0\xef\x7e\x18\x92\x92\x6c\xc7\x4d\xb7\x38\x2c\x70\xf7\xd2\xd6\xe2\x70\xfe\xfe\xe6\x37\xc3\xd6\xf5\xf8\x08\xd8\x85\x2a\x2a\x2d\x16\x4b\x0b\x27\xc7\xbf\xfc\x0d\xde\x29\xb5\xc8\x11\x3e\x7c\xb8\x60\xec\x83\x48\x51\x1a\xcc\xa0\x94\x19\x6a\xb0\x4b\x84\xf3\x82\xa7\x4b\x84\x70\x32\x82\xcf\xa8\x8d\x50\x12\x4e\x92\x63\x88\x48\x60\x18\x8e\x86\xf1\x5b\x56\xa9\x12\xd6\xbc\x02\xa9\x2c\x94\x06\xc1\x2e\x85\x81\xb9\xc8\x11\xf0\x29\xc5\xc2\x82\x90\x90\xaa\x75\x91\x0b\x2e\x53\x84\x47\x61\x97\xce\x48\x50\x91\xb0\xdf\x83\x02\x35\xb3\x5c\x48\xe0\x90\xaa\xa2\x02\x35\xdf\x96\x02\x6e\x19\x03\x00\x58\x5a\x5b\x98\xd3\xf1\xf8\xf1\xf1\x31\xe1\xce\xcd\x44\xe9\xc5\x38\xf7\x62\x66\xfc\x61\x72\x71\x75\x3d\xbd\x7a\x7d\x92\x1c\x33\xf6\x49\xe6\x68\x0c\x68\xfc\x5a\x0a\x8d\x19\xcc\x2a\xe0\x45\x91\x8b\x94\xcf\x72\x84\x9c\x3f\x82\xd2\xc0\x17\x1a\x31\x03\xab\xc8\xd1\x47\x2d\xac\x90\x8b\x11\x18\x35\xb7\x8f\x5c\x23\xcb\x84\xb1\x5a\xcc\x4a\xbb\x93\xa1\xd6\x2d\x61\x60\x5b\x40\x49\xe0\x12\x86\xe7\x53\x98\x4c\x87\xf0\xeb\xf9\x74\x32\x1d\xb1\x2f\x93\xbb\x7f\xdd\x7c\xba\x83\x2f\xe7\xb7\xb7\xe7\xd7\x77\x93\xab\x29\xdc\xdc\xc2\xc5\xcd\xf5\xe5\xe4\x6e\x72\x73\x3d\x85\x9b\x7f\xc2\xf9\xf5\xef\xf0\x7e\x72\x7d\x39\x02\x14\x76\x89\x1a\xf0\xa9\xd0\xe4\xbb\xd2\x20\x28\x77\x98\x25\x6c\x8a\xb8\x63\x7c\xae\xbc\x33\xa6\xc0\x54\xcc\x45\x0a\x39\x97\x8b\x92\x2f\x10\x16\x6a\x83\x5a\x0a\xb9\x80\x02\xf5\x5a\x18\xaa\x9e\x01\x2e\x33\x96\x8b\xb5\xb0\xdc\xba\xdf\xcf\xc2\x49\xd8\xd1\xb8\x69\x18\xab\xeb\x0c\xe7\x42\x22\x0c\x57\x1b\x93\x2e\x71\xcd\x93\x85\x1a\x36\xcd\x78\x0c\x17\x2a\x43\x58\xa0\x44\xcd\xad\xcf\x68\x27\x33\x7c\x0b\x97\x37\x70\x7d\x73\x07\x57\x97\x93\xbb\x84\xb1\x82\xa7\x2b\xf2\xa6\xae\x93\x8f\xfe\x9f\xc9\x35\x5f\x23\x59\x10\xeb\x42\x69\x0b\x11\x1b\x0c\x17\xc2\x2e\xcb\x59\x92\xaa\xf5\x78\xe1\x60\x39\x96\xca\xe2\xeb\x35\x2f\xcc\x78\xb5\x19\xb2\x98\xb1\xf1\x18\xa6\x56\x69\x84\x42\xab\x8d\xc8\xd0\x00\x4a\x2b\xac\x40\x33\x72\xd0\x52\x12\xa5\x35\x23\x0a\x10\x84\xcc\xf0\x09\x0d\xcc\x78\xba\x0a\x25\x87\x15\x56\xaf\x37\x3c\x2f\x91\x34\x19\xd2\x94\xb0\xf1\x98\x7e\x7c\x32\x7c\x81\xa7\x6c\x3c\xae\x6b\x07\x4c\x77\x1b\x92\x8b\x56\xe9\x5d\x55\xa0\x81\xe3\xa6\x21\x61\xa0\x48\xa6\x9f\xb9\x6e\x9a\x11\xa0\xd6\x70\x7a\xe6\xfd\xaa\xdd\x9f\xa7\x5e\x75\x93\xd4\x75\x88\xb3\x53\x13\x1d\xc7\xc9\x34\xe5\x32\xba\x7f\x58\x6d\x92\x2b\x72\xbe\xaa\xff\x3a\x82\xbf\x9c\x34\xb1\x33\x8e\x32\x6b\x1a\x66\xab\x02\x43\xa4\xc6\xea\x32\xb5\x50\xb3\xc1\x6a\x93\xb8\x4f\x6c\x50\x70\x8d\xd2\x42\xa7\x81\x35\x2e\x35\x1f\xfd\x67\x8d\xb6\xd4\xd2\xb8\x7a\xfa\x73\xb0\x4b\x6e\x09\xa2\x25\xb5\x37\x37\xc0\x21\xa8\x20\xe4\xf0\x3c\x07\x55\x50\x1d\x09\x0c\x09\x9b\x97\x32\x85\xc8\x78\xfb\x71\xd0\x1a\xc5\xbd\x39\x72\xc6\x1b\x01\x93\x78\x45\xc1\x83\x2f\xc2\x2e\xf7\xbc\xe0\x20\xf1\x31\xc4\xe2\x32\x8b\xe4\x00\xf9\xf6\xc7\x5d\xe8\xd5\x46\xd8\xbb\x11\xc3\x91\x57\x5b\xb3\x41\xeb\x07\x9c\x01\x76\xce\xfd\x6c\x58\xc3\xea\x5a\x73\xb9\xc0\xfd\x52\x36\x4d\x5d\x5b\x5c\x17\x39\xb7\x08\xc3\x0e\x3b\x43\x48\xe8\xc4\x55\xa1\x2d\xc6\x56\x17\xf4\x72\x1e\x08\x53\xb4\x5d\x8d\xc1\xa0\xf5\x81\xf5\x9f\xb8\x31\x2a\x15\xae\x41\x42\xec\x56\xc1\xa6\xc5\xdc\x85\xd2\x1a\x4d\xa1\x64\x46\x0d\xda\xe2\x95\x6b\x84\xb2\xc8\xe8\x52\x9f\x88\xa3\x90\x89\x6d\x83\xdb\xb9\x18\xc1\x06\xea\x5a\xcc\x21\xb9\x14\x1a\x53\x7b\x25\x53\x95\xa1\x76\x41\xe4\x06\x9b\xe6\xa8\x0b\x2a\xdc\x8e\x09\xb8\x4a\x3b\x60\x61\x45\x08\x5e\xf3\x15\x46\xab\x4d\xf2\x51\xe3\x5c\x3c\x8d\xe0\xcd\xab\x93\x57\x6f\xe2\x3e\xb7\x89\x57\x7a\x6e\xa3\x15\x56\x31\x1b\x50\x37\x3b\x51\xaf\x70\xe7\xf8\xfe\xcd\xe9\x43\xcc\x06\xb8\xfb\xf1\x97\x63\xf7\xb5\xae\x81\x3c\x9d\x84\x80\x9b\x66\xc3\x35\xa8\x3c\xeb\x13\xc7\x06\x62\xde\x36\x96\x49\xde\xa1\xbb\x3e\x22\x99\xe4\x12\x49\x61\xfc\xd6\x1d\xff\x74\x06\x52\xe4\x14\x43\x5b\x73\xd4\x9a\x0d\xf6\xee\x4f\xdb\xfb\x9b\xe0\x4e\x14\x7f\xf7\x7e\x8e\x2b\xba\x9c\xa3\x0c\xd1\x76\xa9\xa6\x16\x3e\x14\x15\x65\xf1\x8c\xc6\x0a\xca\xcc\x9b\x5b\x6d\x92\x9d\xc6\x6f\x8d\x27\x49\x12\xb3\x01\x05\x1d\xb1\xc1\x20\x17\x2b\xd8\x36\x34\x40\x03\x7d\x61\xa7\x34\xd0\xd8\x20\xae\x6b\x08\x38\xee\xd3\xc6\xd8\x80\x98\xcb\x61\x65\x0b\x74\x0e\x48\xad\x3f\xe4\xe0\x69\x8e\xab\x87\xe4\xdc\x79\xd6\x3b\xb4\x57\xbe\x98\x0d\xa8\x13\xff\x3d\x02\xb1\xa1\xc8\xbd\x35\xca\x78\x5d\x27\xbf\xa1\x5d\xaa\x2c\xc0\x2e\x76\xf9\xda\x0f\xf7\xfe\x34\x17\xab\x07\xba\xbd\x17\xe7\xe1\x52\xa2\xf9\x66\x25\x77\x4a\x41\xb5\x70\x1a\x4c\x72\x8b\x6b\xb5\xc1\x08\xbd\xfd\xc3\x15\x46\xf3\x42\x89\xf7\x34\x3b\xd5\x8d\xab\xf6\x81\xc8\x37\xff\x33\x71\x4f\xa4\x41\x6d\xff\x94\xb8\xc3\x77\x29\xf2\xba\x06\x94\x19\x10\x41\x00\x31\x06\x34\x4d\x47\xf1\x87\xfa\xa7\x93\x0f\xcc\xff\x6e\x8b\x98\x1c\x66\xb7\x06\x40\x0f\x4d\xca\x33\xf2\x74\xe9\xc7\x76\x45\x8b\x16\x9a\x96\x0e\x27\x7e\xd1\x73\xcb\x48\x5e\x11\x25\xd2\x18\xa5\xbd\xa1\x53\x25\x01\xd7\x85\xad\xc0\xcd\x70\x4f\xa9\x52\x05\x22\x23\xdd\x2b\xac\x8c\x1b\x76\xa4\x2f\x53\x6e\x15\xc5\x27\x61\xac\x5f\x09\x3a\x47\x42\x0d\xa2\x18\x52\x2e\x21\x73\x3f\x7a\xed\xb3\xca\x22\x18\x0a\x62\x44\x1e\x49\xe0\xa4\xee\x6b\x89\xba\xf2\x11\x84\x9d\xc3\x8f\x55\xe2\x6b\xb2\xb3\xcf\xf5\xdb\x71\x9b\xa5\x2a\xf3\x0c\xda\x74\x2b\xd2\xe7\xbc\x36\xcf\x29\xfe\x59\x26\x23\x34\xb0\xb5\x2e\xc4\x10\xdd\x3f\x74\x12\x23\xaf\x27\xf6\x33\xd9\x94\xb9\xed\xa8\x7c\x47\x8a\xf8\x05\x4d\x1c\xff\x99\x6c\x4f\xb9\x11\x23\xc0\xbe\x89\xd0\x38\x00\x1e\x1e\x03\x83\xe7\xdd\x11\xfd\xec\x63\xb8\x17\x0f\x71\xdb\x27\x7d\x27\x1d\xe8\x15\x29\xf2\x51\xdf\x30\x3d\xa2\xbd\x9a\x11\x9d\xb3\xa6\x5b\x01\x02\x75\x36\x1e\xb2\x57\xa1\x8c\xbf\x71\x9b\x2e\x85\x5c\xd4\x75\x4f\xd7\x3e\xc8\xbe\x80\x2d\x02\xbb\xd2\xbb\x12\x3f\xbf\xe1\x91\x19\x90\x11\x7c\xe1\xb0\x0e\x16\xe8\x02\x6d\x1f\x57\x4f\x85\xa6\x6e\xd0\x6a\x4d\x00\x13\x1a\xf6\xb8\x06\xd6\xee\x47\xdb\x19\x77\xcb\xb6\x07\x30\x83\xad\xb9\x40\x2b\x1d\xcf\x35\xf2\xac\x02\xa3\xf4\xc1\x8d\xe1\x07\xa2\x8c\x36\xbb\x0e\xc6\x10\xed\xce\xa1\x6d\xb0\xbd\x04\xa3\x57\x27\x2f\x03\xa9\x73\xe0\x7b\x88\xfa\xee\xd0\x7d\x11\x95\xbf\xbc\xf9\xc6\x60\xde\xa7\x6a\x1a\xc5\x68\x9e\x0d\xdd\x96\x35\xcd\xe8\x30\x83\xb3\x5d\x1c\xfd\x5a\xfd\x30\x82\xe8\xfa\xb7\x41\xa4\x74\x86\xe1\xb5\x1a\xd6\xca\x2d\xf0\x04\x99\x1e\x43\x41\xd7\x0b\x30\xba\x45\xee\x36\xcd\x19\x2e\x04\xb1\xa9\x85\xb4\xd4\x46\x69\x4f\x8e\x28\x33\x03\x8f\x44\x77\x64\x2c\x47\xb9\xb0\xcb\xf6\xf1\xbd\x07\x3e\xf7\x7a\x6a\x01\xe8\x5e\xd6\x76\xc9\x25\xc8\x04\xbe\xd0\x7d\x1d\xec\x08\xe3\x88\xd1\xbd\xf9\xd1\xe2\x28\x98\x73\x0f\x11\xbf\xe0\x82\x29\x53\x97\x04\xd7\x2f\xa5\x71\xb7\xdc\x7f\x14\x70\x30\xe5\x0c\xbf\x96\xb4\xd3\xa7\xf4\x3c\xb0\x0a\x5c\x82\x43\x64\x8f\x3b\x84\x8a\x4f\x16\xa4\x23\xd5\x90\xdd\x6f\xf7\xc1\x8b\x55\x8a\x82\x87\x47\xab\x8d\x27\x8b\x8b\x90\x20\x09\x42\xda\x18\xf6\xa8\xd8\x3f\xfe\xfe\x1f\x7b\x42\x58\x0c\xdc\xeb\x45\x27\x96\x1e\x5f\x4a\x07\x7f\x32\x9c\xa3\x06\x12\x4a\x2e\x85\x49\xb9\xce\xa2\x70\x29\x99\x22\xae\x42\x9a\x92\xf7\x4e\x58\xcc\xe1\x27\x77\xf4\x99\xe7\x22\x0b\x6b\x92\xaf\x8c\xa3\x64\xea\xae\x59\x39\x7f\xd6\x5e\x81\xd5\xcf\xa0\xbd\x5c\x62\x34\x2b\xe7\xdf\xd9\xf0\xdb\xed\x3e\xb8\x70\x33\x9f\x1b\xb4\xf0\x77\x37\xe0\x66\xe5\xdc\x5b\x47\xd3\x77\x3c\xb5\xef\xac\x9c\xdf\xef\x5c\x38\x7d\xe8\x97\xb4\x30\x1a\xe1\x1f\x67\x20\xfd\x70\xd9\xd5\xfd\xea\x0c\x64\x58\xbc\x3a\xd1\x56\xd2\x5b\x42\x73\x7f\x2a\x1f\xda\xd5\xaa\x73\x74\x6b\xb9\x74\x21\x5e\xe3\x93\x8d\xe2\xb7\xb0\x9d\xac\xb7\xdb\x47\x4e\xe7\x8f\xa6\x65\xc7\xdc\xa1\xc8\xff\x40\xa4\xef\xb7\x29\xb2\xff\x76\x7f\x7c\x7a\x4c\xab\x2d\x39\xf2\x1e\xab\x6e\xb3\xdd\x4b\xd0\x59\x9f\xfc\xd7\x10\xb5\x46\x5e\x83\x8c\xff\x9b\xb4\x85\x9f\xdd\x33\xbc\xfd\xfb\x3f\x01\x00\x00\xff\xff\x8b\x43\x43\x8a\xc8\x14\x00\x00")

func templatesKvschemaGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesKvschemaGotmpl,
		"templates/kvschema.gotmpl",
	)
}

func templatesKvschemaGotmpl() (*asset, error) {
	bytes, err := templatesKvschemaGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/kvschema.gotmpl", size: 5320, mode: os.FileMode(420), modTime: time.Unix(1564110548, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/kvschema.gotmpl": templatesKvschemaGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"kvschema.gotmpl": &bintree{templatesKvschemaGotmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

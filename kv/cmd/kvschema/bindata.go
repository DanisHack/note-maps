// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// templates/kvschema.gotmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesKvschemaGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x6d\x6f\xdb\xc8\x11\xfe\xac\xfd\x15\x73\xfa\x70\x20\x1d\x85\x72\x8c\x02\x4d\x9d\xba\x80\xcf\x76\x53\x21\x39\x3b\x88\x9c\x04\x07\xc3\x28\x56\xe4\x48\x5c\x88\xda\xe5\xed\x2e\x69\x0b\x04\xff\x7b\x31\xcb\xe5\x8b\x64\xc5\xa9\x71\x38\xa0\xfd\x92\x58\xdc\xd9\x79\x79\xe6\x99\x17\xb2\xaa\xa6\x47\xc0\x2e\x54\xbe\xd5\x62\x95\x5a\x38\x39\x7e\xf3\x37\x78\xaf\xd4\x2a\x43\xf8\xf8\xf1\x82\xb1\x8f\x22\x46\x69\x30\x81\x42\x26\xa8\xc1\xa6\x08\xe7\x39\x8f\x53\x04\x7f\x32\x81\xaf\xa8\x8d\x50\x12\x4e\xa2\x63\x08\x48\x60\xec\x8f\xc6\xe1\x3b\xb6\x55\x05\x6c\xf8\x16\xa4\xb2\x50\x18\x04\x9b\x0a\x03\x4b\x91\x21\xe0\x63\x8c\xb9\x05\x21\x21\x56\x9b\x3c\x13\x5c\xc6\x08\x0f\xc2\xa6\xce\x88\x57\x11\xb1\xdf\xbc\x02\xb5\xb0\x5c\x48\xe0\x10\xab\x7c\x0b\x6a\x39\x94\x02\x6e\x19\x03\x00\x48\xad\xcd\xcd\xe9\x74\xfa\xf0\xf0\x10\x71\xe7\x66\xa4\xf4\x6a\x9a\x35\x62\x66\xfa\x71\x76\x71\x75\x3d\xbf\x7a\x7d\x12\x1d\x33\xf6\x45\x66\x68\x0c\x68\xfc\xbd\x10\x1a\x13\x58\x6c\x81\xe7\x79\x26\x62\xbe\xc8\x10\x32\xfe\x00\x4a\x03\x5f\x69\xc4\x04\xac\x22\x47\x1f\xb4\xb0\x42\xae\x26\x60\xd4\xd2\x3e\x70\x8d\x2c\x11\xc6\x6a\xb1\x28\xec\x0e\x42\xad\x5b\xc2\xc0\x50\x40\x49\xe0\x12\xc6\xe7\x73\x98\xcd\xc7\xf0\xcb\xf9\x7c\x36\x9f\xb0\x6f\xb3\xdb\x7f\xdd\x7c\xb9\x85\x6f\xe7\x9f\x3f\x9f\x5f\xdf\xce\xae\xe6\x70\xf3\x19\x2e\x6e\xae\x2f\x67\xb7\xb3\x9b\xeb\x39\xdc\xfc\x13\xce\xaf\x7f\x83\x0f\xb3\xeb\xcb\x09\xa0\xb0\x29\x6a\xc0\xc7\x5c\x93\xef\x4a\x83\x20\xec\x30\x89\xd8\x1c\x71\xc7\xf8\x52\x35\xce\x98\x1c\x63\xb1\x14\x31\x64\x5c\xae\x0a\xbe\x42\x58\xa9\x12\xb5\x14\x72\x05\x39\xea\x8d\x30\x94\x3d\x03\x5c\x26\x2c\x13\x1b\x61\xb9\x75\xbf\x9f\x84\x13\xb1\xa3\x69\x5d\x33\x56\x55\x09\x2e\x85\x44\x18\xaf\x4b\x13\xa7\xb8\xe1\xd1\x4a\x8d\xeb\x7a\x3a\x85\x0b\x95\x20\xac\x50\xa2\xe6\xb6\x41\xb4\x93\x19\xbf\x83\xcb\x1b\xb8\xbe\xb9\x85\xab\xcb\xd9\x6d\xc4\x58\xce\xe3\x35\x79\x53\x55\xd1\xa7\xe6\xcf\xe8\x9a\x6f\x90\x2c\x88\x4d\xae\xb4\x85\x80\x8d\xc6\x2b\x61\xd3\x62\x11\xc5\x6a\x33\x5d\x39\x5a\x4e\xa5\xb2\xf8\x7a\xc3\x73\x33\x5d\x97\x63\x16\x32\x36\x9d\xc2\xdc\x2a\x8d\x90\x6b\x55\x8a\x04\x0d\xa0\xb4\xc2\x0a\x34\x13\x47\x2d\x25\x51\x5a\x33\xa1\x00\x41\xc8\x04\x1f\xd1\xc0\x82\xc7\x6b\x9f\x72\x58\xe3\xf6\x75\xc9\xb3\x02\x49\x93\x21\x4d\x11\x9b\x4e\xe9\xc7\x17\xc3\x57\x78\xca\xa6\xd3\xaa\x72\xc4\x74\xb7\x21\xba\x68\x95\xde\x6e\x73\x34\x70\x5c\xd7\x24\x0c\x14\xc9\xfc\x2b\xd7\x75\x3d\x01\xd4\x1a\x4e\xcf\x1a\xbf\x2a\xf7\xef\x69\xa3\xba\x8e\xaa\xca\xc7\xd9\xa9\x09\x8e\xc3\x68\x1e\x73\x19\xdc\xdd\xaf\xcb\xe8\x8a\x9c\xdf\x56\x7f\x9d\xc0\x5f\x4e\xea\xd0\x19\x47\x99\xd4\x35\xb3\xdb\x1c\x7d\xa4\xc6\xea\x22\xb6\x50\xb1\xd1\xba\x8c\xdc\x23\x36\xca\xb9\xa6\xa8\x95\x84\x4e\x09\xab\x1d\x3a\x9f\xba\x13\x8d\xb6\xd0\xd2\xb8\xac\x36\x22\x60\x53\x6e\x89\xa8\x05\x15\x39\x37\xc0\xa1\x57\x44\x14\xe2\x59\x06\x2a\xa7\x84\x12\x2b\x22\xb6\x2c\x64\x0c\x81\x69\x1c\x09\x7b\xdd\x41\xd8\xdb\x25\xc7\x1a\x53\x60\xa2\x4e\x9d\xf7\xe6\x9b\xb0\xe9\x53\x8f\x38\x48\x7c\xf0\xd1\x39\xac\x91\x9c\x21\x3f\x5f\xe4\xce\x8e\xf2\x00\x7b\x97\x42\x38\x6a\x94\x57\x6c\x34\xf0\x09\xce\x00\x3b\x5f\x7f\x36\xac\x66\x55\xa5\xb9\x5c\xe1\x7e\x96\xeb\xba\xaa\x2c\x6e\xf2\x8c\x5b\x84\x71\x47\xab\x31\x44\x74\xe2\x12\xd4\xe6\x69\x50\x20\xbd\x5c\xc3\x91\x39\xda\x2e\xfd\x60\xd0\x36\x11\xf6\x8f\xb8\x31\x2a\x16\xae\x76\x3c\x08\x56\x41\xd9\xd2\xf1\x42\x69\x8d\x26\x57\x32\xa1\xda\x6d\xa9\xcc\x35\x42\x91\x27\x74\xa9\x87\xe3\xc8\xe3\x31\x34\x38\x84\x63\x02\x25\x54\x95\x58\x42\x74\x29\x34\xc6\xf6\x4a\xc6\x2a\x41\xed\x82\xc8\x0c\xd6\xf5\x51\x17\x94\xbf\x1d\x12\xa7\x95\x76\x9c\xc3\x2d\x91\x7b\xc3\xd7\x18\xac\xcb\xe8\x93\xc6\xa5\x78\x9c\xc0\xdb\x57\x27\xaf\xde\x86\x3b\xf0\x46\x8d\xde\x73\x1b\xac\x71\x1b\xb2\x11\xd5\xba\x93\x6e\x74\xee\x1c\xdf\xbd\x3d\xbd\x0f\xd9\x08\x77\x1f\xbe\x39\x76\x4f\xab\x0a\xc8\xd9\x99\x8f\xb9\xae\x4b\xae\x41\x65\x49\x8f\x1d\x1b\x89\x65\x5b\x76\x26\x7a\x8f\xee\xfa\x84\x64\xa2\x4b\x24\x85\xe1\x3b\x77\xfc\xd3\x19\x48\x91\x51\x18\x6d\xda\x51\x6b\x36\xda\xbb\x3f\x6f\xef\x97\xde\x9d\x20\xfc\xe1\xfd\x0c\xd7\x74\x39\x43\xe9\xa3\xed\xd0\xa6\x02\x3f\x14\x15\x01\x79\x46\x43\x07\x65\xd2\x98\x5b\x97\xd1\x4e\x5b\x68\x8d\x47\x51\x14\xb2\x11\x05\x1d\xb0\xd1\x28\x13\x6b\x18\x1a\x1a\xa1\x81\x3e\xb7\x73\x1a\x77\x6c\x14\x56\x15\x78\x2a\xf7\xb0\x31\x36\xa2\xbe\xe6\xe8\x32\xe0\x9d\xe3\x52\xeb\x0f\x39\x78\x9a\xe1\xfa\x3e\x3a\x77\x9e\xf5\x0e\xed\xa5\x2f\x64\x23\x2a\xc9\x7f\x4f\x40\x94\x14\x79\x63\x8d\x10\xaf\xaa\xe8\x57\xb4\xa9\x4a\x3c\xf3\x42\x87\xd7\x7e\xb8\x77\xa7\x99\x58\xdf\xd3\xed\xbd\x38\x0f\xa7\x12\xcd\x77\x33\xb9\x93\x0a\xca\x85\xd3\x60\xa2\xcf\xb8\x51\x25\x06\xd8\xd8\x3f\x9c\x61\x34\xcf\xa4\x78\x4f\xb3\x53\x5d\xbb\x6c\x1f\x88\xbc\xfc\x9f\x89\x7b\x26\x0d\x6a\xfb\xa7\xc4\xed\x9f\x4b\x91\x55\x15\xa0\x4c\x80\x7a\x04\x50\xd3\x80\xba\xee\x9a\xfe\xa1\xfa\xe9\xe4\xfd\x20\x78\x3f\x6c\x86\xc3\xc9\xf4\x4c\x3f\x6c\x5b\xe1\x6c\x09\x52\x0d\x04\x53\x6e\x60\x81\x28\x69\x33\xca\x44\x2c\x6c\xb6\xa5\xfe\xea\x46\x06\x36\xa3\x7f\xc7\xdc\x83\xc8\x32\x6f\x93\xd4\x91\x55\x8d\xa6\xc8\x2c\x6d\x96\x09\xa1\x4d\x2d\x96\x0f\x2c\x2c\xb5\xda\xd0\xfa\x86\x9b\xdc\x6e\xc1\x50\x8d\x91\xec\x62\x6b\xd1\x3c\xed\xbb\xef\xbf\xd3\x77\x43\x08\xba\xe7\x93\xa6\xa3\xba\x1c\x51\x65\x97\xc3\x66\x56\x9a\xc9\x0e\x15\xba\x23\x57\xdd\x3b\x9b\x02\x52\x21\x8a\xa5\xeb\x07\xa5\x09\xe1\x1f\x67\xf0\xc6\x25\xb1\x84\x33\x28\xcd\xdd\xf1\xfd\x30\x71\xa5\xd3\x7b\x20\x05\x4e\xf1\x60\x1e\x0f\x42\x27\x10\x79\x9c\x36\x7b\xd5\x96\x36\x61\x8a\xf9\xe5\x99\x20\xf8\xfc\xf8\xa1\x8c\x0c\x50\xa7\x7c\x90\xb6\x05\xee\x58\x76\xcb\x49\xa7\xd1\xe5\x05\x93\x3f\x90\x8a\x06\x3c\x34\x30\xc0\x2f\x84\xe0\xee\xfe\x60\x52\xbc\x6f\xed\xa8\xdb\x91\x22\xb0\xd1\x84\xe1\x9f\x3c\x0d\x09\x35\x31\x01\xec\x9b\x0c\x1a\x97\xdb\xc3\x63\x72\xf4\xb4\x7b\x04\x3f\x37\x61\xdc\x89\xfb\xb0\xed\x23\x7d\xa7\x39\xd0\x4b\xa4\xc8\x26\x7d\x43\xe9\x89\xd3\xa8\x99\xd0\x39\xab\xbb\x2d\xc9\x8f\x96\xba\xe1\xd3\x95\x5f\xbc\x7f\xe5\x36\x4e\x85\x5c\x55\x55\x3f\xce\x9a\x20\x9f\x56\x7c\xbb\xac\x37\x15\xfe\xf4\x06\xb8\xdd\xdc\x34\x5c\xf0\xbe\x70\xd8\x78\x0b\x74\x81\x16\xb4\xab\xc7\x5c\xb7\x55\x6a\x53\x14\x1a\xf6\x7a\x31\x6c\xdc\x8f\x96\xb6\xb7\x69\xcb\x75\x4c\x60\x30\x37\x69\x15\xe6\x99\x46\x9e\x6c\xc1\x28\x7d\x70\xa9\x7a\x41\x94\x41\xb9\xeb\x60\x08\xc1\xee\x9c\x1e\xf2\xed\x39\x26\xbd\x3a\xf9\x21\x97\x3a\x1f\x7e\x44\xaa\x1f\xee\x25\xcf\x12\xf3\xcd\xdb\xef\xec\x2e\xfb\xd3\x8c\x7a\x1a\x9a\x27\x7b\x49\x3b\x58\xcc\xe4\xf0\x90\x63\xbb\x54\xfa\x65\xfb\x62\x12\xd1\xf5\xef\xf3\x48\xe9\x04\xfd\xeb\xbe\x1f\x36\x03\xfe\x78\x99\x9e\x46\x5e\xd7\x33\x4c\xfa\x8c\xdc\x0d\x8b\x05\xae\x04\x35\x4e\x0b\x71\xa1\x8d\xd2\x4d\x8f\x43\x99\x18\x78\x48\x51\x3a\x63\x19\xca\x95\x4d\xdb\xaf\x17\x7b\xfc\x73\xaf\x9f\x2d\x07\xdd\xa7\x09\x9b\x72\x09\x32\x82\x6f\x74\x5f\x7b\x3b\xc2\xb8\x8f\x29\xee\xa3\x09\x5a\x9c\x78\x73\xee\x1d\xae\x79\x0d\x00\x53\xc4\x69\x33\xd6\xb8\x85\xc2\xb8\x5b\xee\x4b\x0b\x07\x53\x2c\xf0\xf7\x02\xa5\x85\x98\x5e\xa5\xac\x02\x07\x70\x3b\x16\x55\x91\x25\x6d\x91\x49\x7c\xb4\xe0\xc6\x63\x8b\xee\xf7\x4b\xe1\xd9\x2c\x05\xde\xc3\xa3\x75\xd9\xf4\x8b\x0b\x0f\x90\x04\x21\x6d\x08\x7b\x0d\xb9\x19\x7c\xff\xa7\x65\x21\x2c\xfa\x0e\xdc\x88\xce\x2c\xbd\xab\x2a\xed\xfd\x49\x70\x89\x1a\x48\x28\xba\x14\x26\xe6\x3a\x09\xfc\xa5\x68\x8e\xb8\xf6\x48\x45\x1f\x9c\xb0\x58\xc2\x4f\xee\xe8\x2b\xcf\x44\xe2\x97\x49\xbf\xb4\x50\x63\xa6\x02\x5b\x14\xcb\x27\x15\xe6\x7b\xfb\x19\xb4\x97\x0b\x0c\x16\xc5\xf2\x07\xef\x41\xed\x3b\x90\x77\xe1\x66\xb9\xa4\xb1\xfd\x77\x37\xe9\x16\xc5\xb2\xb1\x8e\xa6\x2f\x7a\xaa\xe0\x45\xb1\xbc\xdb\xb9\x70\x7a\xdf\xaf\xb2\x7e\x46\xd2\x42\x22\x9b\x11\xb3\xab\xfb\xd5\x19\x48\xbf\x9e\x76\xa2\xad\x64\x63\x09\xcd\xdd\xa9\xbc\x6f\x17\xd0\xce\xd1\xc1\x0a\xee\x42\xbc\xc6\x47\x1b\x84\xef\x60\x08\xd6\xbb\xe1\x91\xd3\xf9\x52\x58\x76\xcc\x1d\x8a\xfc\xbf\x88\xf4\xc3\xb0\x4b\xf6\xcf\xee\x8e\x4f\x8f\xe9\x05\x80\x1c\xf9\x80\xdb\x6e\xff\xdf\x03\xe8\xac\x07\xff\x35\x04\xad\x91\xd7\x20\xc3\x3f\x02\x9b\xff\xd9\x7d\xaf\x68\xff\xff\x4f\x00\x00\x00\xff\xff\x63\xf4\xbc\x99\x0c\x16\x00\x00")

func templatesKvschemaGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesKvschemaGotmpl,
		"templates/kvschema.gotmpl",
	)
}

func templatesKvschemaGotmpl() (*asset, error) {
	bytes, err := templatesKvschemaGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/kvschema.gotmpl", size: 5644, mode: os.FileMode(420), modTime: time.Unix(1564182750, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/kvschema.gotmpl": templatesKvschemaGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"kvschema.gotmpl": &bintree{templatesKvschemaGotmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

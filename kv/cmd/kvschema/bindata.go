// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// templates/kvschema.gotmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesKvschemaGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x5f\x6f\xdb\x38\x12\x7f\x36\x3f\xc5\xac\x1f\x16\x52\xaa\x4a\xd9\xe0\x80\xeb\x25\x97\x03\xb2\x49\xae\x67\x6c\x37\x29\xe2\xb4\xc5\x22\x08\x0e\xb4\x34\xb6\x09\xcb\xa4\x4a\x52\x4e\x04\x41\xdf\xfd\x30\x14\x25\xd9\x8e\x9b\xa2\x38\x2c\x70\xf7\xd2\xc6\xe2\x70\xfe\xfe\xe6\x37\xc3\xba\x4e\x8e\x80\x5d\xaa\xa2\xd2\x62\xb1\xb4\x70\x72\xfc\xcb\xdf\xe0\xbd\x52\x8b\x1c\xe1\xc3\x87\x4b\xc6\x3e\x88\x14\xa5\xc1\x0c\x4a\x99\xa1\x06\xbb\x44\xb8\x28\x78\xba\x44\xf0\x27\x11\x7c\x46\x6d\x84\x92\x70\x12\x1f\x43\x40\x02\x63\x7f\x34\x0e\xcf\x58\xa5\x4a\x58\xf3\x0a\xa4\xb2\x50\x1a\x04\xbb\x14\x06\xe6\x22\x47\xc0\xe7\x14\x0b\x0b\x42\x42\xaa\xd6\x45\x2e\xb8\x4c\x11\x9e\x84\x5d\x3a\x23\x5e\x45\xcc\xfe\xf0\x0a\xd4\xcc\x72\x21\x81\x43\xaa\x8a\x0a\xd4\x7c\x5b\x0a\xb8\x65\x0c\x00\x60\x69\x6d\x61\x4e\x93\xe4\xe9\xe9\x29\xe6\xce\xcd\x58\xe9\x45\x92\xb7\x62\x26\xf9\x30\xb9\xbc\xbe\x99\x5e\xbf\x3d\x89\x8f\x19\xfb\x24\x73\x34\x06\x34\x7e\x2d\x85\xc6\x0c\x66\x15\xf0\xa2\xc8\x45\xca\x67\x39\x42\xce\x9f\x40\x69\xe0\x0b\x8d\x98\x81\x55\xe4\xe8\x93\x16\x56\xc8\x45\x04\x46\xcd\xed\x13\xd7\xc8\x32\x61\xac\x16\xb3\xd2\xee\x64\xa8\x73\x4b\x18\xd8\x16\x50\x12\xb8\x84\xf1\xc5\x14\x26\xd3\x31\xfc\x7a\x31\x9d\x4c\x23\xf6\x65\x72\xff\xaf\xdb\x4f\xf7\xf0\xe5\xe2\xee\xee\xe2\xe6\x7e\x72\x3d\x85\xdb\x3b\xb8\xbc\xbd\xb9\x9a\xdc\x4f\x6e\x6f\xa6\x70\xfb\x4f\xb8\xb8\xf9\x03\x7e\x9b\xdc\x5c\x45\x80\xc2\x2e\x51\x03\x3e\x17\x9a\x7c\x57\x1a\x04\xe5\x0e\xb3\x98\x4d\x11\x77\x8c\xcf\x55\xeb\x8c\x29\x30\x15\x73\x91\x42\xce\xe5\xa2\xe4\x0b\x84\x85\xda\xa0\x96\x42\x2e\xa0\x40\xbd\x16\x86\xaa\x67\x80\xcb\x8c\xe5\x62\x2d\x2c\xb7\xee\xf7\x8b\x70\x62\x76\x94\x34\x0d\x63\x75\x9d\xe1\x5c\x48\x84\xf1\x6a\x63\xd2\x25\xae\x79\xbc\x50\xe3\xa6\x49\x12\xb8\x54\x19\xc2\x02\x25\x6a\x6e\xdb\x8c\xf6\x32\xe3\x33\xb8\xba\x85\x9b\xdb\x7b\xb8\xbe\x9a\xdc\xc7\x8c\x15\x3c\x5d\x91\x37\x75\x1d\x7f\x6c\xff\x8c\x6f\xf8\x1a\xc9\x82\x58\x17\x4a\x5b\x08\xd8\x68\xbc\x10\x76\x59\xce\xe2\x54\xad\x93\x85\x83\x65\x22\x95\xc5\xb7\x6b\x5e\x98\x64\xb5\x19\xb3\x90\xb1\x24\x81\xa9\x55\x1a\xa1\xd0\x6a\x23\x32\x34\x80\xd2\x0a\x2b\xd0\x44\x0e\x5a\x4a\xa2\xb4\x26\xa2\x00\x41\xc8\x0c\x9f\xd1\xc0\x8c\xa7\x2b\x5f\x72\x58\x61\xf5\x76\xc3\xf3\x12\x49\x93\x21\x4d\x31\x4b\x12\xfa\xf1\xc9\xf0\x05\x9e\xb2\x24\xa9\x6b\x07\x4c\x77\x1b\xe2\xcb\x4e\xe9\x7d\x55\xa0\x81\xe3\xa6\x21\x61\xa0\x48\xa6\x9f\xb9\x6e\x9a\x08\x50\x6b\x38\x3d\x6f\xfd\xaa\xdd\xbf\xa7\xad\xea\x26\xae\x6b\x1f\x67\xaf\x26\x38\x0e\xe3\x69\xca\x65\xf0\xf0\xb8\xda\xc4\xd7\xe4\x7c\x55\xff\x35\x82\xbf\x9c\x34\xa1\x33\x8e\x32\x6b\x1a\x66\xab\x02\x7d\xa4\xc6\xea\x32\xb5\x50\xb3\xd1\x6a\x13\xbb\x4f\x6c\x54\x70\x8d\xd2\x42\xaf\x81\x35\x8c\xcd\x4b\x99\x42\x60\xda\x5b\x21\x7c\x74\x22\x01\x0e\x42\x21\x1c\xb5\x1a\x6b\x36\x32\xb1\x57\x71\x0e\xc8\x46\x1a\x6d\xa9\x25\xfc\x6c\x58\xc3\xea\x5a\x73\xb9\xc0\xfd\xc8\x9b\xa6\xae\x2d\xae\x8b\x9c\x5b\x84\x71\x9f\xea\x31\xc4\x74\xe2\x9c\xee\x7c\xdf\x02\xcd\x20\xd7\xe6\x6d\x8a\xb6\x4f\x09\x18\xb4\xc6\x61\x6e\xf8\xc4\x8d\x51\xa9\x70\x78\x72\x45\x40\x6a\xc6\x4d\x57\xa2\x4b\xa5\x35\x9a\x42\xc9\x8c\xf0\xdc\x95\x97\x6b\x84\xb2\xc8\xe8\x52\xdc\x27\xe1\xc8\x67\x61\xdb\xe0\x76\x2e\x22\xd8\x40\x5d\x8b\x39\xc4\x57\x42\x63\x6a\xaf\x65\xaa\x32\xd4\x2e\x88\xdc\x60\xd3\x1c\xf5\x41\xf9\xdb\x21\xd5\x59\x69\x57\x07\xac\xa8\xe0\x6b\xbe\xc2\x60\xb5\x89\x3f\x6a\x9c\x8b\xe7\x08\xde\xbd\x39\x79\xf3\x2e\x1c\x72\x1b\xb7\x4a\x2f\x6c\xb0\xc2\x2a\x64\x23\x02\xbf\x13\x6d\x15\xee\x1c\x3f\xbc\x3b\x7d\x0c\xd9\x08\x77\x3f\xfe\x72\xec\xbe\xd6\x35\x90\xa7\x13\x1f\x70\xd3\x6c\xb8\x06\x95\x67\x43\xe2\xd8\x48\xcc\x3b\x1c\x9a\xf8\x3d\xba\xeb\x11\xc9\xc4\x57\x48\x0a\xc3\x33\x77\xfc\xd3\x39\x48\x91\x53\x0c\x5d\xcd\x51\x6b\x36\xda\xbb\x3f\xed\xee\x6f\xbc\x3b\x41\xf8\xdd\xfb\x39\xae\xe8\x72\x8e\xd2\x47\xdb\xa7\x9a\x10\x7f\x28\x2a\xca\xe2\x39\xb1\x30\xca\xac\x35\xb7\xda\xc4\x3b\x7d\xd2\x19\x8f\xe3\x38\x64\x23\x0a\x3a\x60\xa3\x51\x2e\x56\xb0\x6d\x68\x84\x06\x86\xc2\x4e\x89\xff\xd9\x28\xac\x6b\xf0\x38\x1e\xd2\xc6\xd8\x88\x1a\xdd\x61\x65\x0b\x74\x0e\x48\x9d\x3f\xe4\xe0\x69\x8e\xab\xc7\xf8\xc2\x79\x36\x38\xb4\x57\xbe\x90\x8d\x88\x75\xff\x1d\x81\xd8\x50\xe4\xad\x35\xca\x78\x5d\xc7\xbf\xa3\x5d\xaa\xcc\xc3\x2e\x74\xf9\xda\x0f\xf7\xe1\x34\x17\xab\x47\xba\xbd\x17\xe7\xe1\x52\xa2\xf9\x66\x25\x77\x4a\x41\xb5\x70\x1a\x4c\x7c\x87\x6b\xb5\xc1\x00\x5b\xfb\x87\x2b\x8c\xe6\x95\x12\xef\x69\x76\xaa\x1b\x57\xed\x03\x91\x6f\xfe\x67\xe2\x9e\x48\x83\xda\xfe\x29\x71\xfb\xef\x52\xe4\x75\x0d\x28\x33\x20\x82\x00\x62\x0c\x68\x1a\x7f\x78\xb8\x7f\x7a\x79\xa2\xea\x24\x81\xf7\x5b\xc4\xe4\x30\x0b\xed\x75\x03\x7c\x0b\x9a\x94\x67\xe4\xe9\xb2\x9d\x72\x15\xed\x25\x68\x3a\x3a\x9c\xb4\x7b\x91\x9b\xdd\x79\x45\x94\x48\x53\x87\xc6\x6c\xaf\x4a\x02\xae\x0b\x5b\x81\x1b\x79\x2d\xa5\x4a\xe5\x89\x8c\x74\xaf\xb0\x22\x0a\xe6\x96\xf4\x65\xca\x6d\x6e\xf8\x2c\x8c\x6d\x27\x68\xef\x88\xaf\x41\x10\x42\xca\x25\x64\xee\xc7\xa0\x7d\x56\x59\x04\x43\x41\x44\xe4\x91\x04\x4e\xea\xbe\x96\xa8\xab\x36\x02\x3f\xa2\x9d\x25\xc7\xd7\x64\x67\x9f\xeb\xb7\xe3\x36\x4b\x55\xe6\x19\x74\xe9\x56\xa4\xcf\x79\x6d\x5e\x52\xfc\x8b\x4c\x06\x68\x60\x6b\xba\x86\x10\x3c\x3c\xf6\x12\x51\xab\xc7\x61\x43\xa3\x29\x73\xdb\x53\xf9\x8e\x14\xf1\x0b\x9a\x30\xfc\x33\xd9\x9e\x72\x23\x22\xc0\xa1\x89\xd0\x38\x00\x1e\x1e\x03\xa3\x97\xdd\x11\xfc\xdc\xc6\xf0\x20\x1e\xc3\xae\x4f\x86\x4e\x3a\xd0\x2b\x52\xe4\xd1\xd0\x30\x03\xa2\x5b\x35\x11\x9d\xb3\xa6\x5f\x01\x3c\x75\x36\x2d\x64\xaf\x7d\x19\x7f\xe7\x36\x5d\x0a\xb9\xa8\xeb\x81\xae\xdb\x20\x87\x02\x76\x08\xec\x4b\xef\x4a\xfc\xf2\x46\x8b\x4c\x8f\x0c\xef\x0b\x87\xb5\xb7\x40\x17\x68\xfb\xb8\x7e\x2e\x34\x75\x83\x56\x6b\x02\x98\xd0\xb0\xc7\x35\xb0\x76\x3f\xba\xce\xb8\x5f\x76\x3d\x80\x19\x6c\xcd\x05\x5a\xd2\x79\xae\x91\x67\x15\x18\xa5\x0f\x6e\x0c\x3f\x10\x65\xb0\xd9\x75\x30\x84\x60\x77\x0e\x6d\x83\xed\x35\x18\xbd\x39\x79\x1d\x48\xbd\x03\xdf\x43\xd4\x77\x87\xee\xab\xa8\xfc\xe5\xdd\x37\x06\xf3\x3e\x55\xd3\x28\x46\xf3\x62\xe8\x76\xac\x69\xa2\xc3\x0c\x4e\xd4\xe7\x16\xdb\x61\x2d\x2e\xb5\x51\x7a\x6b\xc5\xfd\xec\x88\x6a\x37\xad\x6c\x74\x3b\x9f\x1b\xa4\xe7\xa3\x65\xbb\x50\xfc\xb5\xfa\x61\x10\xd2\xf5\x6f\xe3\x50\xe9\x0c\xfd\xfb\xd0\x6f\xa6\x5b\xf8\xf3\x32\x03\x0c\xbd\xae\x57\x90\x78\x87\xdc\x2d\xab\x33\x5c\x08\x22\x64\x0b\xa9\x0b\xb9\xe5\x57\x94\x99\x81\x27\x62\x4c\x32\x96\xa3\x5c\xd8\x65\xf7\xdc\xdd\xc3\xaf\x7b\xaf\x74\x18\x76\x6f\x59\xbb\xe4\x12\x64\x0c\x5f\xe8\xbe\xf6\x76\x84\x71\xdc\xea\x5e\xd9\x68\x31\xf2\xe6\xe8\xbb\xdf\x91\xc1\x94\xa9\x4b\x82\x6b\xb9\xd2\xb8\x5b\xee\x69\xce\xc1\x94\x33\xfc\x5a\xd2\xb3\x20\xe5\x79\x4e\xbb\xb7\x4b\xb0\x8f\xec\x69\x87\x93\xf1\xd9\x82\x74\xbc\xec\xb3\xfb\xed\x56\x7a\xb5\x4a\x81\xf7\xf0\x68\x0f\x14\x11\x48\x2a\x78\x08\x7b\x74\xde\xbe\xb7\xfe\x1f\xfb\x4a\x58\xf4\xfc\xdd\x8a\x4e\x2c\x3d\x9d\x95\xf6\xfe\x64\x38\x47\x0d\x24\x14\x5f\x09\x93\x72\x9d\x05\xfe\x52\x3c\x45\x5c\xf9\x3c\xc5\xae\x43\x86\xbd\xc2\x6d\xee\x3f\x39\xa9\xcf\x3c\x17\x99\xdf\xba\xda\x2a\x39\x86\xa7\x66\x9d\x95\xf3\x17\xdd\xea\x87\xc4\x39\x74\x97\x4b\x0c\x66\xe5\xfc\x3b\x0f\x86\xee\xb1\xe0\xbd\xf1\x9d\xf9\x77\x37\x2f\x67\xe5\xbc\xb5\x8e\x66\x20\x10\x62\x83\x59\x39\x7f\xd8\xb9\x70\xfa\x38\xec\x7c\x7e\xd2\xc2\x3f\xce\x41\xb6\xb3\x6a\x57\xf7\x9b\x73\x90\x7e\x8f\xeb\x45\x3b\xc9\xd6\x12\x9a\x87\x53\xf9\xd8\x6d\x6a\xbd\xa3\x5b\xbb\xaa\x0b\xf1\x06\x9f\x6d\x10\x9e\xc1\x76\xb2\xce\xb6\x8f\x9c\xce\x1f\x4d\xcb\x8e\xb9\x43\x91\xbf\x16\x69\x6b\x69\xa7\xb2\x7e\xd3\x72\xd6\x7f\xc3\xca\x95\x78\x3f\x25\xe7\x43\xba\xdf\x42\xd0\xa9\x7d\x0b\x32\xfc\x6f\x12\xe5\x7f\xf6\xef\xf8\xee\xff\xff\x04\x00\x00\xff\xff\xa5\x5a\x93\x71\x38\x14\x00\x00")

func templatesKvschemaGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesKvschemaGotmpl,
		"templates/kvschema.gotmpl",
	)
}

func templatesKvschemaGotmpl() (*asset, error) {
	bytes, err := templatesKvschemaGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/kvschema.gotmpl", size: 5176, mode: os.FileMode(420), modTime: time.Unix(1563680051, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/kvschema.gotmpl": templatesKvschemaGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"kvschema.gotmpl": &bintree{templatesKvschemaGotmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
